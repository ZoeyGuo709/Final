[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MUSA 550: Final Project",
    "section": "",
    "text": "This website presents our research on heat stress around bus stops and explores the factors contributing to its occurrence.\nThe Urban Heat Island (UHI) effect poses significant challenges to public transit users, especially those waiting at bus stops, where prolonged exposure to extreme heat can result in serious health risks. Despite growing awareness of these dangers, there remains a lack of research examining hyperlocal heat stress levels around bus stops and their interactions with surrounding urban environments. To address this gap, this study leverages Universal Thermal Climate Index (UTCI) data across Philadelphia to analyze heat stress variations in the immediate vicinity of bus stops. Using a Random Forest (RF) model, we investigate the nonlinear relationships and threshold effects between heat stress, socioeconomic characteristics, and built environment factors. The findings reveal substantial spatio-temporal variations in heat stress, with consistently elevated levels during midday hours across the city. Notably, bus stops in neighborhoods with higher poverty rates experience greater heat stress, while those in wealthier areas, as indicated by higher median household values, show comparatively lower levels of heat stress. These results underscore the urgent need for targeted and equitable heat mitigation strategies to protect vulnerable populations in high-risk areas.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "MUSA 550: Final Project",
    "section": "",
    "text": "This website presents our research on heat stress around bus stops and explores the factors contributing to its occurrence.\nThe Urban Heat Island (UHI) effect poses significant challenges to public transit users, especially those waiting at bus stops, where prolonged exposure to extreme heat can result in serious health risks. Despite growing awareness of these dangers, there remains a lack of research examining hyperlocal heat stress levels around bus stops and their interactions with surrounding urban environments. To address this gap, this study leverages Universal Thermal Climate Index (UTCI) data across Philadelphia to analyze heat stress variations in the immediate vicinity of bus stops. Using a Random Forest (RF) model, we investigate the nonlinear relationships and threshold effects between heat stress, socioeconomic characteristics, and built environment factors. The findings reveal substantial spatio-temporal variations in heat stress, with consistently elevated levels during midday hours across the city. Notably, bus stops in neighborhoods with higher poverty rates experience greater heat stress, while those in wealthier areas, as indicated by higher median household values, show comparatively lower levels of heat stress. These results underscore the urgent need for targeted and equitable heat mitigation strategies to protect vulnerable populations in high-risk areas.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "analysis/DataProcessing.html",
    "href": "analysis/DataProcessing.html",
    "title": "MUSA 550 Final Project",
    "section": "",
    "text": "## Trail Doc for Data Exploration:\n# Install geopandas (only required once in Jupyter Notebook)\n%pip install geopandas\n\n# Import necessary library\nimport geopandas as gpd\n\n# Path to your GeoJSON file\nfile_path = \"C:/Users/25077/Final/data/2020_PA_stops_buffer3_UTCI.geojson\"\n\n# Read the GeoJSON file into a GeoDataFrame\ngdf = gpd.read_file(file_path)\n\n# Display the first few rows of the GeoDataFrame\nprint(gdf.head())\n\n# Check the coordinate reference system (CRS)\nprint(gdf.crs)\n\nRequirement already satisfied: geopandas in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (0.13.2)\nRequirement already satisfied: fiona&gt;=1.8.19 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from geopandas) (1.9.4)\nRequirement already satisfied: packaging in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from geopandas) (24.1)\nRequirement already satisfied: pandas&gt;=1.1.0 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from geopandas) (1.5.3)\nRequirement already satisfied: pyproj&gt;=3.0.1 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from geopandas) (3.6.1)\nRequirement already satisfied: shapely&gt;=1.7.1 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from geopandas) (2.0.1)\nRequirement already satisfied: attrs&gt;=19.2.0 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from fiona&gt;=1.8.19-&gt;geopandas) (24.2.0)\nRequirement already satisfied: certifi in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from fiona&gt;=1.8.19-&gt;geopandas) (2024.7.4)\nRequirement already satisfied: click~=8.0 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from fiona&gt;=1.8.19-&gt;geopandas) (8.1.7)\nRequirement already satisfied: click-plugins&gt;=1.0 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from fiona&gt;=1.8.19-&gt;geopandas) (1.1.1)\nRequirement already satisfied: cligj&gt;=0.5 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from fiona&gt;=1.8.19-&gt;geopandas) (0.7.2)\nRequirement already satisfied: six in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from fiona&gt;=1.8.19-&gt;geopandas) (1.16.0)\nRequirement already satisfied: python-dateutil&gt;=2.8.1 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from pandas&gt;=1.1.0-&gt;geopandas) (2.9.0)\nRequirement already satisfied: pytz&gt;=2020.1 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from pandas&gt;=1.1.0-&gt;geopandas) (2024.1)\nRequirement already satisfied: numpy&gt;=1.21.0 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from pandas&gt;=1.1.0-&gt;geopandas) (1.24.4)\nRequirement already satisfied: colorama in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from click~=8.0-&gt;fiona&gt;=1.8.19-&gt;geopandas) (0.4.6)\nNote: you may need to restart the kernel to use updated packages.\n  stop_id                  stop_name        route_ids     8_mean     9_mean  \\\n0      69  Front St & Market St Loop  [17, 33, 48, 5]  32.921080  35.331401   \n1     359         Market St & 6th St         [17, 33]  32.915207  35.338738   \n2     428       2nd St Station - MFL            [MFL]  32.882592  35.296339   \n3     638    5th St & Market St - FS         [38, 44]  32.816049  35.166788   \n4     735         7th St & Market St             [47]  32.586969  34.947970   \n\n     10_mean    11_mean    12_mean    13_mean    14_mean    15_mean  \\\n0  36.593409  37.493377  37.913334  37.893180  37.814597  37.627905   \n1  36.595370  37.492715  37.932264  37.907860  37.815116  37.605102   \n2  36.539032  37.417567  37.840649  37.825040  37.782353  37.626118   \n3  34.362318  32.769761  37.407488  37.704560  37.758148  37.709751   \n4  34.387193  33.483910  33.636118  35.379926  36.952045  37.521443   \n\n     16_mean    17_mean    18_mean    19_mean  \\\n0  36.747721  35.554851  35.416561  29.373637   \n1  36.710582  35.510728  35.384121  28.046279   \n2  36.595218  31.573465  33.564511  28.153362   \n3  36.895949  35.734573  30.248365  26.671371   \n4  36.774522  30.665176  31.752130  28.824302   \n\n                                            geometry  \n0  MULTIPOLYGON (((2699512.735 235350.662, 269951...  \n1  MULTIPOLYGON (((2697281.988 235665.342, 269728...  \n2  MULTIPOLYGON (((2699108.578 235349.659, 269910...  \n3  MULTIPOLYGON (((2697693.353 235764.198, 269769...  \n4  MULTIPOLYGON (((2696802.363 235646.120, 269680...  \nEPSG:2272\n\n\n\nimport matplotlib.pyplot as plt\n\n# Convert MULTIPOLYGON geometries to their centroids\ngdf['geometry'] = gdf.geometry.centroid\n\n# Reproject to WGS 84 (EPSG:4326)\ngdf = gdf.to_crs(epsg=4326)\n\n# Load the city limits GeoJSON\ncity_limits_gdf = gpd.read_file(\"C:/Users/25077/Final/data/City_Limits.geojson\")\ncity_limits_gdf = city_limits_gdf.to_crs(epsg=4326)  # Reproject if needed\n\n# Plot both layers\nfig, ax = plt.subplots(figsize=(10, 10))\ncity_limits_gdf.plot(ax=ax, color='lightgray', alpha=0.4, label=\"City Limits\")\ngdf.plot(ax=ax, markersize=2, color='dimgrey', label=\"Bus Stops\")\n\n# Add title and legend\nplt.title(\"Bus Stops in Philadelphia\")\nplt.xlabel(\"Longitude\")\nplt.ylabel(\"Latitude\")\nplt.legend()\nplt.show()\n\nC:\\Users\\25077\\AppData\\Local\\Temp\\ipykernel_40800\\2252602194.py:4: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n  gdf['geometry'] = gdf.geometry.centroid\nC:\\Users\\25077\\AppData\\Local\\Temp\\ipykernel_40800\\2252602194.py:22: UserWarning: Legend does not support handles for PatchCollection instances.\nSee: https://matplotlib.org/stable/tutorials/intermediate/legend_guide.html#implementing-a-custom-legend-handler\n  plt.legend()\n\n\n\n\n\n\n\n\n\n\ngdf.head()\n\n\n\n\n\n\n\n\nstop_id\nstop_name\nroute_ids\n8_mean\n9_mean\n10_mean\n11_mean\n12_mean\n13_mean\n14_mean\n15_mean\n16_mean\n17_mean\n18_mean\n19_mean\ngeometry\n\n\n\n\n0\n69\nFront St & Market St Loop\n[17, 33, 48, 5]\n32.921080\n35.331401\n36.593409\n37.493377\n37.913334\n37.893180\n37.814597\n37.627905\n36.747721\n35.554851\n35.416561\n29.373637\nPOINT (-75.14232 39.94977)\n\n\n1\n359\nMarket St & 6th St\n[17, 33]\n32.915207\n35.338738\n36.595370\n37.492715\n37.932264\n37.907860\n37.815116\n37.605102\n36.710582\n35.510728\n35.384121\n28.046279\nPOINT (-75.15024 39.95081)\n\n\n2\n428\n2nd St Station - MFL\n[MFL]\n32.882592\n35.296339\n36.539032\n37.417567\n37.840649\n37.825040\n37.782353\n37.626118\n36.595218\n31.573465\n33.564511\n28.153362\nPOINT (-75.14376 39.94979)\n\n\n3\n638\n5th St & Market St - FS\n[38, 44]\n32.816049\n35.166788\n34.362318\n32.769761\n37.407488\n37.704560\n37.758148\n37.709751\n36.895949\n35.734573\n30.248365\n26.671371\nPOINT (-75.14876 39.95105)\n\n\n4\n735\n7th St & Market St\n[47]\n32.586969\n34.947970\n34.387193\n33.483910\n33.636118\n35.379926\n36.952045\n37.521443\n36.774522\n30.665176\n31.752130\n28.824302\nPOINT (-75.15195 39.95080)\n\n\n\n\n\n\n\n\n## PLOT AVG TEMP OF ALL STOPS\n\n# List of time frames (column names in the GeoDataFrame)\ntime_frames = [f'{hour}_mean' for hour in range(8, 20)]  # From 8 AM to 7 PM\n\n# Calculate the average temperature for each time frame\naverage_temperatures = {time: gdf[time].mean() for time in time_frames}\n\n# Display the results\nfor time, avg_temp in average_temperatures.items():\n    print(f\"Average temperature at {time}: {avg_temp:.2f}°C\")\n\nimport matplotlib.pyplot as plt\n\n# Data for average temperatures\ntime_frames = [\n    \"8:00 - 9:00\", \"9:00 - 10:00\", \"10:00 - 11:00\", \"11:00 - 12:00\",\n    \"12:00 - 13:00\", \"13:00 - 14:00\", \"14:00 - 15:00\", \"15:00 - 16:00\",\n    \"16:00 - 17:00\", \"17:00 - 18:00\", \"18:00 - 19:00\", \"19:00 - 20:00\"\n]\naverage_temperatures = [\n    31.71, 34.41, 35.86, 36.86, 37.39, 37.46, 37.35, 37.04,\n    36.04, 34.70, 34.04, 28.30\n]\n\n# Plot the chart\nplt.figure(figsize=(10, 6))\nplt.plot(time_frames, average_temperatures, marker='o', color='brown', label='Average Temperature')\n\n# Add chart labels and title\nplt.title(\"Bus Stops Average Temperature by Time Frame\", fontsize=16)\nplt.xlabel(\"Time Frame\", fontsize=12)\nplt.ylabel(\"Average Temperature (°C)\", fontsize=12)\nplt.xticks(rotation=45)\nplt.grid(True, linestyle='--', alpha=0.6)\nplt.legend()\nplt.tight_layout()\n\n# Display the chart\nplt.show()\n\nAverage temperature at 8_mean: 31.71°C\nAverage temperature at 9_mean: 34.41°C\nAverage temperature at 10_mean: 35.86°C\nAverage temperature at 11_mean: 36.86°C\nAverage temperature at 12_mean: 37.39°C\nAverage temperature at 13_mean: 37.46°C\nAverage temperature at 14_mean: 37.35°C\nAverage temperature at 15_mean: 37.04°C\nAverage temperature at 16_mean: 36.04°C\nAverage temperature at 17_mean: 34.70°C\nAverage temperature at 18_mean: 34.04°C\nAverage temperature at 19_mean: 28.30°C\n\n\n\nimport pandas as pd\n\n# Assuming `gdf` is the given DataFrame with temperature data\n# Extract time frame columns (columns with '_mean' in their names)\ntime_frames = [col for col in gdf.columns if '_mean' in col]\n\n# List to store results\nresults = []\n\n# Loop through each time frame and find max and min temperature stops\nfor time in time_frames:\n    max_temp = gdf[time].max()  # Find maximum temperature\n    min_temp = gdf[time].min()  # Find minimum temperature\n    max_stop = gdf.loc[gdf[time] == max_temp, 'stop_name'].values[0]  # Stop with max temperature\n    min_stop = gdf.loc[gdf[time] == min_temp, 'stop_name'].values[0]  # Stop with min temperature\n    results.append({\n        'Time Frame': time.replace('_mean', '') + \":00\",\n        'Max Temp (°C)': max_temp,\n        'Stop with Max Temp': max_stop,\n        'Min Temp (°C)': min_temp,\n        'Stop with Min Temp': min_stop\n    })\n\n# Convert results into a DataFrame\nextreme_temps_df = pd.DataFrame(results)\n\n# Display the DataFrame as a table\nfrom IPython.display import display\n\n# Save the DataFrame to a CSV file\nextreme_temps_df.to_csv('temperature_extremes.csv', index=False)\n\n\n\n\nimport geopandas as gpd\n\nimport matplotlib.pyplot as plt\n\nimport math\nimport matplotlib.colors as mcolors\n\n# List of times and corresponding temperature columns (assuming 12 times)\ntimes = [f'{hour}_mean' for hour in range(8, 20)]  # From 8 AM to 7 PM\ntitles = [f\"{hour}:00\" for hour in range(8, 20)]\n\n# Define a colormap for 5 categories\ncmap = mcolors.ListedColormap(['blue', 'green', 'yellow', 'orange', 'red'])\nbounds = [0, 20, 30, 35, 40, 50]  # Define temperature bounds for categories\nnorm = mcolors.BoundaryNorm(bounds, cmap.N)\n\n# Calculate the number of rows and columns for the subplots\nnum_plots = len(times)\ncols = 4  # Number of columns\nrows = math.ceil(num_plots / cols)  # Calculate rows needed\n\n# Create a figure with dynamic subplots\nfig, axes = plt.subplots(rows, cols, figsize=(20, 15), sharex=True, sharey=True)\naxes = axes.flatten()  # Flatten the axes array for easier indexing\n\nfor i, time in enumerate(times):\n    # Categorize the temperature into 5 categories based on defined bounds\n    gdf['category'] = pd.cut(gdf[time], bins=bounds, labels=False, include_lowest=True)\n\n    # Plot bus stops with assigned categories\n    gdf.plot(\n        ax=axes[i],\n        column='category',  # Use the category column\n        cmap=cmap,\n        markersize=50,\n        legend=True,\n        legend_kwds={'shrink': 0.5, 'ticks': bounds, 'label': \"Temperature (°C)\"},\n    )\n    axes[i].set_title(f\"Bus Stops Temperature Map ({titles[i]})\")\n    axes[i].set_xlabel(\"Longitude\")\n    axes[i].set_ylabel(\"Latitude\")\n\n# Turn off unused subplots\nfor j in range(i + 1, len(axes)):\n    axes[j].axis('off')\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\nCell In[9], line 26\n     22 axes = axes.flatten()  # Flatten the axes array for easier indexing\n     24 for i, time in enumerate(times):\n     25     # Categorize the temperature into 5 categories based on defined bounds\n---&gt; 26     gdf['category'] = pd.cut(gdf[time], bins=bounds, labels=False, include_lowest=True)\n     28     # Plot bus stops with assigned categories\n     29     gdf.plot(\n     30         ax=axes[i],\n     31         column='category',  # Use the category column\n   (...)\n     35         legend_kwds={'shrink': 0.5, 'ticks': bounds, 'label': \"Temperature (°C)\"},\n     36     )\n\nNameError: name 'pd' is not defined"
  },
  {
    "objectID": "analysis/3-altair-hvplot.html",
    "href": "analysis/3-altair-hvplot.html",
    "title": "Explore integration with Socio-Ecological & Built Form",
    "section": "",
    "text": "wrangle data from ACS and Building Footprint\nVisualize the ACS and Building footprint data\nhave the variables ready for Random Forest examination\nPresent the variables",
    "crumbs": [
      "Analysis",
      "Explore integration with Socio-Ecological & Built Form"
    ]
  },
  {
    "objectID": "analysis/1-currentData.html",
    "href": "analysis/1-currentData.html",
    "title": "Explore the Universal Thermal Climate Index (UTCI) data of Philadelphia",
    "section": "",
    "text": "The study area is Philadelphia, Pennsylvania, USA, a major urban center with diverse urban characteristics. Philadelphia is the sixth-most populous city in the U.S. and is known for its dense urban layout, historical architecture, and significant variation in neighborhood demographics and infrastructure. The city comprises 408 census tracts, which serve as fundamental spatial units for analyzing urban environmental variables.\nThe Universal Thermal Climate Index (UTCI) is a comprehensive metric used to assess outdoor thermal comfort and human heat stress under varying climatic conditions. Unlike simple temperature measures, UTCI integrates air temperature, humidity, wind speed, and radiant heat to evaluate the perceived temperature’s impact on the human body. Widely applied in urban planning, climate studies, and public health, UTCI provides a standardized and globally applicable framework for understanding how environmental factors influence human thermal comfort and well-being.\n\nShow the UTCI data map of Philadelphia  The spatio-temporal distribution of the UTCI from 8 a.m. to 7 p.m. in Philadelphia reveals significant diurnal variations in heat stress across the city. UTCI values begin relatively low in the early morning at 8 a.m., with values ranging from approximately [27.9]°C to [33.4]°C. As the day progresses, UTCI values steadily increase, peaking around midday and early afternoon (12 p.m. to 3 p.m.), reaching maximum levels between [37.0]°C and [38.9]°C. During these peak hours, large portions of the city experience heightened heat stress, especially in areas with vacant land and less vegetation in Northeast Philadelphia. By late afternoon (4 p.m. onward), UTCI values begin to decrease gradually, with noticeable reductions in heat stress by 6 p.m. and continuing into the evening hours. At 7 p.m., the UTCI drops to values between [26.3]°C and [30.6]°C, reflecting the cooling effect as solar radiation diminishes. This temporal pattern demonstrates the peak heat exposure period in the early afternoon and emphasizes the importance of targeted interventions during these high-risk hours to mitigate heat stress impacts in vulnerable urban areas\n\n\n\n\nFig 1. UTCI data in Philadelphia\n\n\n\nShow the Bus Stop data map of Philadelphia  Philadelphia’s public transit system, operated by the Southeastern Pennsylvania Transportation Authority (SEPTA), includes 145 bus routes and 8,126 bus stops across the city, providing extensive coverage and accessibility for residents. This extensive network of bus stops presents an ideal context for studying heat stress at the transit micro-level. Philadelphia’s spatial diversity offers a robust basis for examining the relationship between heat stress around bus stops and the surrounding environment, providing insights into equitable urban planning and transit policy\n\n\n\n\nFig 2. Bus Stops in Philadephia\n\n\n\nShow the Bus Stop heat stress map of Philadelphia  To analyze the average temperature of bus stops across different time frames, we observe from Figure 3 that the temperature starts to rise steadily between 8:00 AM and 1:00 PM, eventually reaching a plateau around 1:00 PM. From 1:00 PM to 6:00 PM, the temperature gradually declines at a slow and consistent rate. However, after 6:00 PM, the temperature drops sharply, falling below 30°C by 7:00 PM, marking a significant decrease in overall temperature across all bus stops.\n\n\n\n\nFig 2. All Bus Stops’ Average Temperature by Time\n\n\nIn each time frame, the bus stop with the highest and lowest temperature is identified as Table 1 shown below:\n\n# Load the CSV file\nimport pandas as pd\nextreme_temps_df = pd.read_csv('temperature_extremes.csv')\n\n# Display the extreme temperature DataFrame\ndisplay(extreme_temps_df.style.set_caption(\"Table 1. Highest and Lowest Temperatures for Each Time Frame\").hide_index())\n\nC:\\Users\\25077\\AppData\\Local\\Temp\\ipykernel_2336\\336461269.py:6: FutureWarning: this method is deprecated in favour of `Styler.hide(axis=\"index\")`\n  display(extreme_temps_df.style.set_caption(\"Highest and Lowest Temperatures for Each Time Frame\").hide_index())\n\n\n\n\n\n\n\nTable 1: Highest and Lowest Temperatures for Each Time Frame\n\n\n\n\n\nTime Frame\nMax Temp (°C)\nStop with Max Temp\nMin Temp (°C)\nStop with Min Temp\n\n\n\n\n8:00\n33.157532\nLancaster Av & Bible Way\n28.041004\nWayne Av & Johnson St\n\n\n9:00\n35.673363\n60th St Station - MFL\n29.555286\n60th St & Media St\n\n\n10:00\n36.903307\nLancaster Av & Bible Way\n30.945198\n11th St & Godfrey Av\n\n\n11:00\n37.777462\nColumbia Av & Delaware Av\n31.842836\n11th St & Godfrey Av\n\n\n12:00\n38.249495\nHunting Park Av & Front St\n32.281161\n11th St & Godfrey Av\n\n\n13:00\n38.254392\nHunting Park Av & Front St\n32.465799\n11th St & Godfrey Av\n\n\n14:00\n38.213178\nWayne Av & Clarissa St\n32.309602\nWalnut St & 5th St - FS\n\n\n15:00\n38.224674\nWayne Av & Clarissa St\n31.853688\nWalnut St & 5th St - FS\n\n\n16:00\n37.364624\nWayne Av & Clarissa St\n31.272664\nWalnut St & 5th St - FS\n\n\n17:00\n36.124757\nWayne Av & Clarissa St\n30.130579\nBustleton Av & Van Kirk St\n\n\n18:00\n36.123368\n17th St & Arch St\n28.865079\n8th St & Cecil B Moore Av - FS\n\n\n19:00\n29.710466\n63rd St Station - MFL\n26.396539\nBaltimore Av & 44th St\n\n\n\n\n\n\n\n\n\nExplore 1: in each time frame, which is the highest-temp bus stop and which is the lowest temp.\nExplore 2: which bus stop has the highest avg temp.",
    "crumbs": [
      "Analysis",
      "Explore the Universal Thermal Climate Index (UTCI) data of Philadelphia"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "Hello everyone\n\n\nOn this about page, you might want to add more information about yourself, the project, or course.\n\n\nMy name is Eric Delmelle, the instructor for the course.\nYou can find more information about me on my personal website.\nThis site is an example site showing how to use Quarto for the final project for MUSA 550, during fall 2024.\nWrite something about you\n\nor about something you like",
    "crumbs": [
      "About Me"
    ]
  },
  {
    "objectID": "analysis/2-static-images.html",
    "href": "analysis/2-static-images.html",
    "title": "Bus Stop Heat Stress",
    "section": "",
    "text": "Mid-day bus stops heat stress\nin this time frame, which stop has the highest value, temp range, avg",
    "crumbs": [
      "Analysis",
      "Bus Stop Heat Stress"
    ]
  },
  {
    "objectID": "analysis/4-folium.html",
    "href": "analysis/4-folium.html",
    "title": "Random Forest Machine Learning",
    "section": "",
    "text": "build the ML form\nrun the result\npresent the result\nDiscussions",
    "crumbs": [
      "Analysis",
      "Random Forest Machine Learning"
    ]
  },
  {
    "objectID": "analysis/index.html",
    "href": "analysis/index.html",
    "title": "Analysis",
    "section": "",
    "text": "Analysis\nThis section includes examples of technical analysis done using Jupyter notebooks. Each sub-section highlights different types of analyses and visualizations. In particular, it highlights that we can easily publish interactive visualizations produced with packages such as hvPlot, altair, or Folium, without losing any of the interactive features.\nOn this page, you might want to share more introductory or background information about the analyses to help guide the reader.",
    "crumbs": [
      "Analysis"
    ]
  }
]