[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MUSA 550: Final Project",
    "section": "",
    "text": "This website presents our research on heat stress around bus stops and explores the factors contributing to its occurrence.\nThe Urban Heat Island (UHI) effect poses significant challenges to public transit users, especially those waiting at bus stops, where prolonged exposure to extreme heat can result in serious health risks. Despite growing awareness of these dangers, there remains a lack of research examining hyperlocal heat stress levels around bus stops and their interactions with surrounding urban environments. To address this gap, this study leverages Universal Thermal Climate Index (UTCI) data across Philadelphia to analyze heat stress variations in the immediate vicinity of bus stops. Using a Random Forest (RF) model, we investigate the nonlinear relationships and threshold effects between heat stress, socioeconomic characteristics, and built environment factors. The findings reveal substantial spatio-temporal variations in heat stress, with consistently elevated levels during midday hours across the city. Notably, bus stops in neighborhoods with higher poverty rates experience greater heat stress, while those in wealthier areas, as indicated by higher median household values, show comparatively lower levels of heat stress. These results underscore the urgent need for targeted and equitable heat mitigation strategies to protect vulnerable populations in high-risk areas.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "MUSA 550: Final Project",
    "section": "",
    "text": "This website presents our research on heat stress around bus stops and explores the factors contributing to its occurrence.\nThe Urban Heat Island (UHI) effect poses significant challenges to public transit users, especially those waiting at bus stops, where prolonged exposure to extreme heat can result in serious health risks. Despite growing awareness of these dangers, there remains a lack of research examining hyperlocal heat stress levels around bus stops and their interactions with surrounding urban environments. To address this gap, this study leverages Universal Thermal Climate Index (UTCI) data across Philadelphia to analyze heat stress variations in the immediate vicinity of bus stops. Using a Random Forest (RF) model, we investigate the nonlinear relationships and threshold effects between heat stress, socioeconomic characteristics, and built environment factors. The findings reveal substantial spatio-temporal variations in heat stress, with consistently elevated levels during midday hours across the city. Notably, bus stops in neighborhoods with higher poverty rates experience greater heat stress, while those in wealthier areas, as indicated by higher median household values, show comparatively lower levels of heat stress. These results underscore the urgent need for targeted and equitable heat mitigation strategies to protect vulnerable populations in high-risk areas.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "Code/DataProcessing.html",
    "href": "Code/DataProcessing.html",
    "title": "MUSA 550 Final Project",
    "section": "",
    "text": "## Trail Doc for Data Exploration:\n# Install geopandas (only required once in Jupyter Notebook)\n%pip install geopandas\n\n# Import necessary library\nimport geopandas as gpd\n\n# Path to your GeoJSON file\nfile_path = \"C:/Users/25077/Final/data/2020_PA_stops_buffer3_UTCI.geojson\"\n\n# Read the GeoJSON file into a GeoDataFrame\ngdf = gpd.read_file(file_path)\n\n# Display the first few rows of the GeoDataFrame\nprint(gdf.head())\n\n# Check the coordinate reference system (CRS)\nprint(gdf.crs)\n\nRequirement already satisfied: geopandas in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (0.13.2)\nRequirement already satisfied: fiona&gt;=1.8.19 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from geopandas) (1.9.4)\nRequirement already satisfied: packaging in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from geopandas) (24.1)\nRequirement already satisfied: pandas&gt;=1.1.0 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from geopandas) (1.5.3)\nRequirement already satisfied: pyproj&gt;=3.0.1 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from geopandas) (3.6.1)\nRequirement already satisfied: shapely&gt;=1.7.1 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from geopandas) (2.0.1)\nRequirement already satisfied: attrs&gt;=19.2.0 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from fiona&gt;=1.8.19-&gt;geopandas) (24.2.0)\nRequirement already satisfied: certifi in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from fiona&gt;=1.8.19-&gt;geopandas) (2024.7.4)\nRequirement already satisfied: click~=8.0 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from fiona&gt;=1.8.19-&gt;geopandas) (8.1.7)\nRequirement already satisfied: click-plugins&gt;=1.0 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from fiona&gt;=1.8.19-&gt;geopandas) (1.1.1)\nRequirement already satisfied: cligj&gt;=0.5 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from fiona&gt;=1.8.19-&gt;geopandas) (0.7.2)\nRequirement already satisfied: six in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from fiona&gt;=1.8.19-&gt;geopandas) (1.16.0)\nRequirement already satisfied: python-dateutil&gt;=2.8.1 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from pandas&gt;=1.1.0-&gt;geopandas) (2.9.0)\nRequirement already satisfied: pytz&gt;=2020.1 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from pandas&gt;=1.1.0-&gt;geopandas) (2024.1)\nRequirement already satisfied: numpy&gt;=1.21.0 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from pandas&gt;=1.1.0-&gt;geopandas) (1.24.4)\nRequirement already satisfied: colorama in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from click~=8.0-&gt;fiona&gt;=1.8.19-&gt;geopandas) (0.4.6)\nNote: you may need to restart the kernel to use updated packages.\n  stop_id                  stop_name        route_ids     8_mean     9_mean  \\\n0      69  Front St & Market St Loop  [17, 33, 48, 5]  32.921080  35.331401   \n1     359         Market St & 6th St         [17, 33]  32.915207  35.338738   \n2     428       2nd St Station - MFL            [MFL]  32.882592  35.296339   \n3     638    5th St & Market St - FS         [38, 44]  32.816049  35.166788   \n4     735         7th St & Market St             [47]  32.586969  34.947970   \n\n     10_mean    11_mean    12_mean    13_mean    14_mean    15_mean  \\\n0  36.593409  37.493377  37.913334  37.893180  37.814597  37.627905   \n1  36.595370  37.492715  37.932264  37.907860  37.815116  37.605102   \n2  36.539032  37.417567  37.840649  37.825040  37.782353  37.626118   \n3  34.362318  32.769761  37.407488  37.704560  37.758148  37.709751   \n4  34.387193  33.483910  33.636118  35.379926  36.952045  37.521443   \n\n     16_mean    17_mean    18_mean    19_mean  \\\n0  36.747721  35.554851  35.416561  29.373637   \n1  36.710582  35.510728  35.384121  28.046279   \n2  36.595218  31.573465  33.564511  28.153362   \n3  36.895949  35.734573  30.248365  26.671371   \n4  36.774522  30.665176  31.752130  28.824302   \n\n                                            geometry  \n0  MULTIPOLYGON (((2699512.735 235350.662, 269951...  \n1  MULTIPOLYGON (((2697281.988 235665.342, 269728...  \n2  MULTIPOLYGON (((2699108.578 235349.659, 269910...  \n3  MULTIPOLYGON (((2697693.353 235764.198, 269769...  \n4  MULTIPOLYGON (((2696802.363 235646.120, 269680...  \nEPSG:2272\n\n\n\nimport matplotlib.pyplot as plt\n\n# Convert MULTIPOLYGON geometries to their centroids\ngdf['geometry'] = gdf.geometry.centroid\n\n# Reproject to WGS 84 (EPSG:4326)\ngdf = gdf.to_crs(epsg=4326)\n\n# Load the city limits GeoJSON\ncity_limits_gdf = gpd.read_file(\"C:/Users/25077/Final/data/City_Limits.geojson\")\ncity_limits_gdf = city_limits_gdf.to_crs(epsg=4326)  # Reproject if needed\n\n# Plot both layers\nfig, ax = plt.subplots(figsize=(10, 10))\ncity_limits_gdf.plot(ax=ax, color='lightgray', alpha=0.4, label=\"City Limits\")\ngdf.plot(ax=ax, markersize=2, color='dimgrey', label=\"Bus Stops\")\n\n# Add title and legend\nplt.title(\"Bus Stops in Philadelphia\")\nplt.xlabel(\"Longitude\")\nplt.ylabel(\"Latitude\")\nplt.legend()\nplt.show()\n\nC:\\Users\\25077\\AppData\\Local\\Temp\\ipykernel_40800\\2252602194.py:4: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n  gdf['geometry'] = gdf.geometry.centroid\nC:\\Users\\25077\\AppData\\Local\\Temp\\ipykernel_40800\\2252602194.py:22: UserWarning: Legend does not support handles for PatchCollection instances.\nSee: https://matplotlib.org/stable/tutorials/intermediate/legend_guide.html#implementing-a-custom-legend-handler\n  plt.legend()\n\n\n\n\n\n\n\n\n\n\ngdf.head()\n\n\n\n\n\n\n\n\nstop_id\nstop_name\nroute_ids\n8_mean\n9_mean\n10_mean\n11_mean\n12_mean\n13_mean\n14_mean\n15_mean\n16_mean\n17_mean\n18_mean\n19_mean\ngeometry\n\n\n\n\n0\n69\nFront St & Market St Loop\n[17, 33, 48, 5]\n32.921080\n35.331401\n36.593409\n37.493377\n37.913334\n37.893180\n37.814597\n37.627905\n36.747721\n35.554851\n35.416561\n29.373637\nPOINT (-75.14232 39.94977)\n\n\n1\n359\nMarket St & 6th St\n[17, 33]\n32.915207\n35.338738\n36.595370\n37.492715\n37.932264\n37.907860\n37.815116\n37.605102\n36.710582\n35.510728\n35.384121\n28.046279\nPOINT (-75.15024 39.95081)\n\n\n2\n428\n2nd St Station - MFL\n[MFL]\n32.882592\n35.296339\n36.539032\n37.417567\n37.840649\n37.825040\n37.782353\n37.626118\n36.595218\n31.573465\n33.564511\n28.153362\nPOINT (-75.14376 39.94979)\n\n\n3\n638\n5th St & Market St - FS\n[38, 44]\n32.816049\n35.166788\n34.362318\n32.769761\n37.407488\n37.704560\n37.758148\n37.709751\n36.895949\n35.734573\n30.248365\n26.671371\nPOINT (-75.14876 39.95105)\n\n\n4\n735\n7th St & Market St\n[47]\n32.586969\n34.947970\n34.387193\n33.483910\n33.636118\n35.379926\n36.952045\n37.521443\n36.774522\n30.665176\n31.752130\n28.824302\nPOINT (-75.15195 39.95080)\n\n\n\n\n\n\n\n\n## PLOT AVG TEMP OF ALL STOPS\n\n# List of time frames (column names in the GeoDataFrame)\ntime_frames = [f'{hour}_mean' for hour in range(8, 20)]  # From 8 AM to 7 PM\n\n# Calculate the average temperature for each time frame\naverage_temperatures = {time: gdf[time].mean() for time in time_frames}\n\n# Display the results\nfor time, avg_temp in average_temperatures.items():\n    print(f\"Average temperature at {time}: {avg_temp:.2f}°C\")\n\nimport matplotlib.pyplot as plt\n\n# Data for average temperatures\ntime_frames = [\n    \"8:00 - 9:00\", \"9:00 - 10:00\", \"10:00 - 11:00\", \"11:00 - 12:00\",\n    \"12:00 - 13:00\", \"13:00 - 14:00\", \"14:00 - 15:00\", \"15:00 - 16:00\",\n    \"16:00 - 17:00\", \"17:00 - 18:00\", \"18:00 - 19:00\", \"19:00 - 20:00\"\n]\naverage_temperatures = [\n    31.71, 34.41, 35.86, 36.86, 37.39, 37.46, 37.35, 37.04,\n    36.04, 34.70, 34.04, 28.30\n]\n\n# Plot the chart\nplt.figure(figsize=(10, 6))\nplt.plot(time_frames, average_temperatures, marker='o', color='brown', label='Average Temperature')\n\n# Add chart labels and title\nplt.title(\"Bus Stops Average Temperature by Time Frame\", fontsize=16)\nplt.xlabel(\"Time Frame\", fontsize=12)\nplt.ylabel(\"Average Temperature (°C)\", fontsize=12)\nplt.xticks(rotation=45)\nplt.grid(True, linestyle='--', alpha=0.6)\nplt.legend()\nplt.tight_layout()\n\n# Display the chart\nplt.show()\n\nAverage temperature at 8_mean: 31.71°C\nAverage temperature at 9_mean: 34.41°C\nAverage temperature at 10_mean: 35.86°C\nAverage temperature at 11_mean: 36.86°C\nAverage temperature at 12_mean: 37.39°C\nAverage temperature at 13_mean: 37.46°C\nAverage temperature at 14_mean: 37.35°C\nAverage temperature at 15_mean: 37.04°C\nAverage temperature at 16_mean: 36.04°C\nAverage temperature at 17_mean: 34.70°C\nAverage temperature at 18_mean: 34.04°C\nAverage temperature at 19_mean: 28.30°C\n\n\n\nimport pandas as pd\n\n# Assuming `gdf` is the given DataFrame with temperature data\n# Extract time frame columns (columns with '_mean' in their names)\ntime_frames = [col for col in gdf.columns if '_mean' in col]\n\n# List to store results\nresults = []\n\n# Loop through each time frame and find max and min temperature stops\nfor time in time_frames:\n    max_temp = gdf[time].max()  # Find maximum temperature\n    min_temp = gdf[time].min()  # Find minimum temperature\n    max_stop = gdf.loc[gdf[time] == max_temp, 'stop_name'].values[0]  # Stop with max temperature\n    min_stop = gdf.loc[gdf[time] == min_temp, 'stop_name'].values[0]  # Stop with min temperature\n    results.append({\n        'Time Frame': time.replace('_mean', '') + \":00\",\n        'Max Temp (°C)': max_temp,\n        'Stop with Max Temp': max_stop,\n        'Min Temp (°C)': min_temp,\n        'Stop with Min Temp': min_stop\n    })\n\n# Convert results into a DataFrame\nextreme_temps_df = pd.DataFrame(results)\n\n# Display the DataFrame as a table\nfrom IPython.display import display\n\n# Save the DataFrame to a CSV file\nextreme_temps_df.to_csv('temperature_extremes.csv', index=False)\n\n\n\n\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\n\n# Assuming your GeoDataFrame (gdf) has the following columns:\n# - 'geometry': containing the coordinates of each stop\n# - Columns like '8_mean', '9_mean', ..., '19_mean' for temperature readings\n\n# Calculate the average temperature for each stop\ntemperature_columns = [col for col in gdf.columns if '_mean' in col]\ngdf['avg_temp'] = gdf[temperature_columns].mean(axis=1)\n\n# Plot the average temperature on a map with city limits overlay\nfig, ax = plt.subplots(1, 1, figsize=(12, 8))\n\n# Plot the city limits\ncity_limits_gdf.plot(ax=ax, color='lightgrey',alpha = 0.3, edgecolor='none', label='City Limits')\n\n# Plot the stops with average temperature\ngdf.plot(column='avg_temp', cmap='coolwarm', legend=True, ax=ax, markersize=1)\n\n# Add titles and labels\nax.set_title('Average Temperature of Stops with City Limits', fontsize=16)\nax.set_xlabel('Longitude', fontsize=12)\nax.set_ylabel('Latitude', fontsize=12)\nax.legend()\n\n# Show the plot\nplt.show()\n\nC:\\Users\\25077\\AppData\\Local\\Temp\\ipykernel_40800\\526089891.py:25: UserWarning: Legend does not support handles for PatchCollection instances.\nSee: https://matplotlib.org/stable/tutorials/intermediate/legend_guide.html#implementing-a-custom-legend-handler\n  ax.legend()\nNo artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n\n\n\n\n\n\n\n\n\n\ngdf.head()\n\n\n\n\n\n\n\n\nstop_id\nstop_name\nroute_ids\n8_mean\n9_mean\n10_mean\n11_mean\n12_mean\n13_mean\n14_mean\n15_mean\n16_mean\n17_mean\n18_mean\n19_mean\ngeometry\ncolor\navg_temp\n\n\n\n\n0\n69\nFront St & Market St Loop\n[17, 33, 48, 5]\n32.921080\n35.331401\n36.593409\n37.493377\n37.913334\n37.893180\n37.814597\n37.627905\n36.747721\n35.554851\n35.416561\n29.373637\nPOINT (-75.14232 39.94977)\nred\n35.890088\n\n\n1\n359\nMarket St & 6th St\n[17, 33]\n32.915207\n35.338738\n36.595370\n37.492715\n37.932264\n37.907860\n37.815116\n37.605102\n36.710582\n35.510728\n35.384121\n28.046279\nPOINT (-75.15024 39.95081)\nblue\n35.771174\n\n\n2\n428\n2nd St Station - MFL\n[MFL]\n32.882592\n35.296339\n36.539032\n37.417567\n37.840649\n37.825040\n37.782353\n37.626118\n36.595218\n31.573465\n33.564511\n28.153362\nPOINT (-75.14376 39.94979)\nblue\n35.258021\n\n\n3\n638\n5th St & Market St - FS\n[38, 44]\n32.816049\n35.166788\n34.362318\n32.769761\n37.407488\n37.704560\n37.758148\n37.709751\n36.895949\n35.734573\n30.248365\n26.671371\nPOINT (-75.14876 39.95105)\nblue\n34.603760\n\n\n4\n735\n7th St & Market St\n[47]\n32.586969\n34.947970\n34.387193\n33.483910\n33.636118\n35.379926\n36.952045\n37.521443\n36.774522\n30.665176\n31.752130\n28.824302\nPOINT (-75.15195 39.95080)\nred\n33.909309\n\n\n\n\n\n\n\n\nimport folium\nimport json\nfrom matplotlib.colors import LinearSegmentedColormap, to_hex\nimport numpy as np\n\n# Load the city limits GeoJSON\ncity_limits_gdf = gpd.read_file(\"C:/Users/25077/Final/data/City_Limits.geojson\")\ncity_limits_gdf = city_limits_gdf.to_crs(epsg=4326)  # Reproject if needed\n\n# Assuming your GeoDataFrame (gdf) has the following columns:\n# - 'geometry': containing the coordinates of each stop\n# - Columns like '8_mean', '9_mean', ..., '19_mean' for temperature readings\n\n# Convert city limits GeoDataFrame to GeoJSON\ncity_limits_json = json.loads(city_limits_gdf.to_json())\n\n# Create a function to generate a colormap for the temperature values\ndef get_color(value, min_value, max_value):\n    cmap = LinearSegmentedColormap.from_list(\"temp_cmap\", [\"skyblue\", \"indianred\"])\n    norm_value = (value - min_value) / (max_value - min_value) if max_value &gt; min_value else 0.5\n    return to_hex(cmap(norm_value))\n\n# Create a function to generate an interactive map with all time frames\ndef create_combined_map_with_dropdown(gdf, city_limits_json, time_frames, output_file=\"interactive_combined_map.html\"):\n    # Create the base map\n    m = folium.Map(location=[gdf.geometry.y.mean(), gdf.geometry.x.mean()], zoom_start=13)\n\n    # Add city limits as a grey overlay\n    folium.GeoJson(\n        city_limits_json,\n        style_function=lambda x: {\n            'fillColor': 'white',\n            'color': 'none',\n            'fillOpacity': 0.75\n        },\n        name='City Limits'\n    ).add_to(m)\n\n    # Add temperature markers for each time frame as separate layers\n    for time_frame in time_frames:\n        temp_col = f\"{time_frame}_mean\"\n        if temp_col in gdf.columns:\n            min_temp = gdf[temp_col].min()\n            max_temp = gdf[temp_col].max()\n\n            feature_group = folium.FeatureGroup(name=f\"Time Frame {time_frame}\")\n            for _, row in gdf.iterrows():\n                if not np.isnan(row[temp_col]):\n                    color = get_color(row[temp_col], min_temp, max_temp)\n                    folium.CircleMarker(\n                        location=(row.geometry.y, row.geometry.x),\n                        radius=2,\n                        color=color,\n                        fill=True,\n                        fill_color=color,\n                        fill_opacity=0.8,\n                    ).add_to(feature_group)\n            feature_group.add_to(m)\n\n    # Add a legend for the temperature gradient\n    legend_html = f\"\"\"&lt;div style='position: fixed; \n                bottom: 50px; left: 50px; width: 150px; height: 90px; \n                background-color: white; z-index:9999; font-size:14px; \n                border:2px solid grey; padding: 10px;'&gt;\n                &lt;b&gt;Temperature Legend&lt;/b&gt;&lt;br&gt;\n                &lt;div style='background: linear-gradient(to right, skyblue, indianred); height: 15px;'&gt;&lt;/div&gt;\n                &lt;span style='float: left;'&gt;Min&lt;/span&gt;\n                &lt;span style='float: right;'&gt;Max&lt;/span&gt;&lt;br&gt;\n                &lt;/div&gt;\"\"\"\n    m.get_root().html.add_child(folium.Element(legend_html))\n\n    # Add layer control for the dropdown menu\n    folium.LayerControl().add_to(m)\n\n    # Save the map to an HTML file\n    m.save(output_file)\n    print(f\"Interactive map saved as {output_file}\")\n\n# Generate and save the combined interactive map with dropdown for all time frames\ncreate_combined_map_with_dropdown(\n    gdf, \n    city_limits_json, \n    [col.split('_')[0] for col in gdf.columns if '_mean' in col], \n    output_file=\"interactive_combined_map_with_dropdown.html\"\n)\n\nInteractive map saved as interactive_combined_map_with_dropdown.html"
  },
  {
    "objectID": "analysis/4-folium.html",
    "href": "analysis/4-folium.html",
    "title": "Random Forest Machine Learning",
    "section": "",
    "text": "build the ML form\nrun the result\npresent the result\nDiscussions",
    "crumbs": [
      "Analysis",
      "Random Forest Machine Learning"
    ]
  },
  {
    "objectID": "analysis/2-static-images.html",
    "href": "analysis/2-static-images.html",
    "title": "Bus Stop Heat Stress",
    "section": "",
    "text": "Based on our analysis of heat stress throughout the day in Philadelphia, we observed that mid-day, specifically 1:00 PM, experiences the highest temperatures, resulting in severe heat stress. Therefore, we aim to focus our study on this time frame to examine the general heat stress patterns and the spatial distribution of heat stress around bus stops.\n1. Mid-day bus stops heat stress First, we plotted the mid day bus stops temperature of a day:\n\n\n\nFig 1. Mid-day Bus Stops Temperature Map\n\n\nWe observed that most bus stops are located in areas with very high temperatures, ranging between 37–38°C. Only a few bus stops are in areas below 35°C, with almost none below 33°C, indicating severe heat stress at the majority of bus stops. The relatively cooler bus stops are primarily concentrated in Center City, with a few scattered across the northwest and parts of the northeast regions.\n2. Hottest and Coldest 10%\nAfter examining the overall heat stress patterns of all bus stops during mid-day in Philadelphia, we became curious about the locations of the hottest and coldest bus stops. To explore this, we plotted the top 10% hottest and coldest bus stops.\n\n\n\nFig 2. Mid-day Hottest 10% Bus Stops\n\n\nUpon reviewing the data, we observed that the hottest 10% of bus stops are primarily located in the northern, northeastern, and southern parts of the city.\n\n\n\nFig 3. Mid-day Coldest 10% Bus Stops\n\n\nWhen examining the coldest bus stops, we found that most are located in Center City, the northwestern area, and the far northeast.\n3. Clustering\nWe are interested in determining whether the hottest and coldest 10% of bus stops are spatially clustered. To investigate this, we use DBSCAN to identify potential clusters.\n\n\n\nFig 4. Hottest 10% Bus Stops Clustering\n\n\nAs shown in Fig. 4, the hottest 10% of bus stops form several small clusters. These clusters are primarily concentrated in the Frankford area, along Roosevelt Boulevard in northeastern Philadelphia, and in the southern part of the city along Christopher Columbus Boulevard.\n\n\n\nFig 5. Coldest 10% Bus Stops Clustering\n\n\nAs shown in Fig. 5, the coldest 10% of bus stops exhibit a clear clustering pattern in the Center City area, including neighborhoods such as Rittenhouse Square and Logan Square. Additional clusters are present in the northwestern part of the city, including Mt. Airy and Northwest Philadelphia.\n4. Spatial Autocorrelation\nHere we want to look at all the stops together, to see if specific spatial relationships (clusters or outliers) exist between bus stop temperatures and their neighboring stops.\n\n\n\nFig 6. Bus Stops Temperatures Spatial Autocorrelation\n\n\n\nHigh-High Area: Hotspots or clusters of high temperatures are likely the result of urban heat islands or a lack of cooling infrastructure, such as shade or vegetation. These areas, predominantly in the northern, southern, and western parts of the city, may benefit from interventions like installing shade structures or using reflective materials to help reduce heat levels.\nHigh-Low Area: Bus stops with high temperatures surrounded by bus stops with lower temperatures may indicate outliers caused by localized heat effects, such as a lack of shade, excessive asphalt coverage, or dense infrastructure. These anomalies warrant further investigation to identify the specific conditions contributing to elevated temperatures. Such patterns are predominantly observed in the northern and northeastern areas of the city.\nLow-Low Area: Bus stops with low temperatures surrounded by other low-temperature stops indicate cold spots, likely due to natural cooling effects such as proximity to green spaces, water bodies, or less dense infrastructure. While these areas may not require immediate intervention, they offer valuable insights into effective cooling mechanisms that can be replicated in hotter regions. These patterns are primarily observed in Center City, the northwestern areas, and the far northeast, aligning with our analysis of the coldest 10% of bus stops.\nLow-High Area: Bus stops with low temperatures surrounded by bus stops with higher temperatures suggest outliers, likely caused by localized cooling effects such as shade trees, reflective surfaces, or proximity to cooling infrastructure. These areas offer opportunities to study and replicate effective cooling strategies in hotter zones. They are predominantly located on the outskirts of cold spot areas.",
    "crumbs": [
      "Analysis",
      "Bus Stop Heat Stress"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Us",
    "section": "",
    "text": "Hey everyone\n\n\nMy name is Shengao Yi, I am a Ph.D. student in City & Regional Planning at the University of Pennsylvania Weitzman School of Design, concentrating on landscape planning and urban analytics.\nYou can find more information about me on my personal website.\nMy research focuses on the AI for landscape planning, optimization and design, urban microclimate modeling, micro-scale urban analytics, and GeoAI. I am dedicated to addressing socio-environmental challenges by developing innovative AI-driven approaches to mitigate urban heat effects, optimize green infrastructure, and enhance urban resilience.\n\n\n\n\n\nHello everyone\n\n\nMy name is Ziyi Guo, 2nd year MCP student concentrated in Smart Cities.\nYou can find more information about me on my personal website.\nI specialize in transportation planning, including new transportation technologies, integration with energy systems, modeling, and data analytics. With a background in architecture and urban design, I bring strong skills in graphic, spatial, and experience design.",
    "crumbs": [
      "About Us"
    ]
  },
  {
    "objectID": "analysis/1-currentData.html",
    "href": "analysis/1-currentData.html",
    "title": "Explore the Universal Thermal Climate Index (UTCI) data of Philadelphia",
    "section": "",
    "text": "The study area is Philadelphia, Pennsylvania, USA, a major urban center with diverse urban characteristics. Philadelphia is the sixth-most populous city in the U.S. and is known for its dense urban layout, historical architecture, and significant variation in neighborhood demographics and infrastructure. The city comprises 408 census tracts, which serve as fundamental spatial units for analyzing urban environmental variables.\nThe Universal Thermal Climate Index (UTCI) is a comprehensive metric used to assess outdoor thermal comfort and human heat stress under varying climatic conditions. Unlike simple temperature measures, UTCI integrates air temperature, humidity, wind speed, and radiant heat to evaluate the perceived temperature’s impact on the human body. Widely applied in urban planning, climate studies, and public health, UTCI provides a standardized and globally applicable framework for understanding how environmental factors influence human thermal comfort and well-being.\n\nUniversal Thermal Climate Index （UTCI） Distribution in Philadelphia  The spatio-temporal distribution of the UTCI from 8 a.m. to 7 p.m. in Philadelphia reveals significant diurnal variations in heat stress across the city. UTCI values begin relatively low in the early morning at 8 a.m., with values ranging from approximately [27.9]°C to [33.4]°C. As the day progresses, UTCI values steadily increase, peaking around midday and early afternoon (12 p.m. to 3 p.m.), reaching maximum levels between [37.0]°C and [38.9]°C. During these peak hours, large portions of the city experience heightened heat stress, especially in areas with vacant land and less vegetation in Northeast Philadelphia. By late afternoon (4 p.m. onward), UTCI values begin to decrease gradually, with noticeable reductions in heat stress by 6 p.m. and continuing into the evening hours. At 7 p.m., the UTCI drops to values between [26.3]°C and [30.6]°C, reflecting the cooling effect as solar radiation diminishes. This temporal pattern demonstrates the peak heat exposure period in the early afternoon and emphasizes the importance of targeted interventions during these high-risk hours to mitigate heat stress impacts in vulnerable urban areas\n\n\n\n\nFig 1. UTCI data in Philadelphia\n\n\n\nBus Stops in Philadelphia  Philadelphia’s public transit system, operated by the Southeastern Pennsylvania Transportation Authority (SEPTA), includes 145 bus routes and 8,126 bus stops across the city, providing extensive coverage and accessibility for residents. This extensive network of bus stops presents an ideal context for studying heat stress at the transit micro-level. Philadelphia’s spatial diversity offers a robust basis for examining the relationship between heat stress around bus stops and the surrounding environment, providing insights into equitable urban planning and transit policy\n\n\n\n\nFig 2. Bus Stops in Philadephia\n\n\n\nBus Stop Heat Stress in Philadelphia  To analyze the average temperature of bus stops across different time frames, we observe from Figure 3 that the temperature starts to rise steadily between 8:00 AM and 1:00 PM, eventually reaching a plateau around 1:00 PM. From 1:00 PM to 6:00 PM, the temperature gradually declines at a slow and consistent rate. However, after 6:00 PM, the temperature drops sharply, falling below 30°C by 7:00 PM, marking a significant decrease in overall temperature across all bus stops.\n\n\n\n\nFig 3. All Bus Stops’ Average Temperature by Time\n\n\nIn each time frame, the bus stop with the highest and lowest temperature is identified as Table 1 shown below:\n\n# Load the CSV file\nimport pandas as pd\nextreme_temps_df = pd.read_csv('temperature_extremes.csv')\n\n# Display the extreme temperature DataFrame\ndisplay(extreme_temps_df.style.set_caption(\"Table 1. Highest and Lowest Temperatures for Each Time Frame\").hide_index())\n\nC:\\Users\\25077\\AppData\\Local\\Temp\\ipykernel_2336\\4242756400.py:6: FutureWarning: this method is deprecated in favour of `Styler.hide(axis=\"index\")`\n  display(extreme_temps_df.style.set_caption(\"Table 1. Highest and Lowest Temperatures for Each Time Frame\").hide_index())\n\n\n\n\n\n\n\nTable 1: Table 1. Highest and Lowest Temperatures for Each Time Frame\n\n\n\n\n\nTime Frame\nMax Temp (°C)\nStop with Max Temp\nMin Temp (°C)\nStop with Min Temp\n\n\n\n\n8:00\n33.157532\nLancaster Av & Bible Way\n28.041004\nWayne Av & Johnson St\n\n\n9:00\n35.673363\n60th St Station - MFL\n29.555286\n60th St & Media St\n\n\n10:00\n36.903307\nLancaster Av & Bible Way\n30.945198\n11th St & Godfrey Av\n\n\n11:00\n37.777462\nColumbia Av & Delaware Av\n31.842836\n11th St & Godfrey Av\n\n\n12:00\n38.249495\nHunting Park Av & Front St\n32.281161\n11th St & Godfrey Av\n\n\n13:00\n38.254392\nHunting Park Av & Front St\n32.465799\n11th St & Godfrey Av\n\n\n14:00\n38.213178\nWayne Av & Clarissa St\n32.309602\nWalnut St & 5th St - FS\n\n\n15:00\n38.224674\nWayne Av & Clarissa St\n31.853688\nWalnut St & 5th St - FS\n\n\n16:00\n37.364624\nWayne Av & Clarissa St\n31.272664\nWalnut St & 5th St - FS\n\n\n17:00\n36.124757\nWayne Av & Clarissa St\n30.130579\nBustleton Av & Van Kirk St\n\n\n18:00\n36.123368\n17th St & Arch St\n28.865079\n8th St & Cecil B Moore Av - FS\n\n\n19:00\n29.710466\n63rd St Station - MFL\n26.396539\nBaltimore Av & 44th St\n\n\n\n\n\n\n\n\nTo enhance the geospatial perspective, we created a map visualizing the average temperature at each stop.:\n\n\n\nFig 4. Bus Stops’ Average Temperature\n\n\nTo examine more closely, we will display the temperature at each stop for each time frame.\n\nfrom IPython.display import IFrame\n\n# Path to the HTML file\nhtml_file = \"interactive_combined_map_with_dropdown.html\"\n\n# Display the map in the notebook\nIFrame(src=html_file, width='100%', height=600)",
    "crumbs": [
      "Analysis",
      "Explore the Universal Thermal Climate Index (UTCI) data of Philadelphia"
    ]
  },
  {
    "objectID": "analysis/3-altair-hvplot.html",
    "href": "analysis/3-altair-hvplot.html",
    "title": "Explore integration with Socio-Ecological & Built Form",
    "section": "",
    "text": "To further understand the correlation between heat stress and various urban factors, we have identified multiple categories of contributing variables, including socioeconomic, demographic, and built environment factors. These factors provide valuable insights into how heat stress is distributed across urban areas and help guide strategies to mitigate its effects. By examining these variables comprehensively, we aim to identify areas of concern and develop actionable interventions to improve the thermal comfort and overall well-being of urban residents.\n1. Wrangle data from ACS and Building Footprint\n\n\n\nFig 1. Urban Environment Variables\n\n\nThe variables listed in the table can significantly influence the temperatures and heat stress experienced at bus stops, both directly and indirectly. Socioeconomic factors like population density (PD) often correlate with the urban heat island (UHI) effect, where areas with higher population densities experience elevated temperatures due to increased human activity, heat emissions, and reduced vegetation. Bus stops in such high-density areas are likely to experience more intense heat stress, particularly during peak usage times. Moreover, socioeconomic indicators like median household income (MHI) and poverty rate (PR) play an important role, as wealthier neighborhoods may feature better infrastructure such as shaded or air-conditioned bus stops, while lower-income areas often lack such amenities, increasing exposure to heat.\nEthnic diversity and racial composition (e.g., White_prop, African_prop, Asian_prop) may also influence exposure to heat stress at bus stops. Communities with higher socioeconomic challenges may experience disparities in urban design, such as insufficient tree cover or shading. Similarly, variables like unemployment rate (UR) and car holding rate (CHR) can indirectly impact heat stress. For instance, areas with lower car ownership may rely more on public transit, leading to higher pedestrian traffic at bus stops, which exacerbates heat exposure during peak periods.\nThe built environment plays a critical role in determining heat stress at bus stops. Factors such as building number (BN), building density (BD), and floor area ratio (FAR) are directly tied to the urban heat island effect, where dense building areas trap heat and retain it, increasing temperatures. Building height (BH) has a mixed influence—it can create shaded areas during certain times of the day, reducing heat stress, but may also limit airflow and contribute to localized temperature increases. On the other hand, the green view index (GVI) is particularly beneficial in mitigating heat stress, as higher vegetation cover lowers local temperatures through shading and evapotranspiration.\nEnclosure values also affect thermal comfort, as areas with higher enclosure may limit airflow and trap heat, exacerbating heat stress at bus stops. Open spaces with sufficient ventilation, on the other hand, reduce perceived heat and improve comfort. Urban design that incorporates green infrastructure, such as trees and shaded structures, can significantly mitigate the effects of heat stress. By analyzing these variables together, planners can identify areas in need of interventions like tree planting, bus shelter installation, or reflective materials to reduce the risks associated with high temperatures and improve thermal comfort for bus stop users.\n2. Visualize the ACS and Building Form data\nTo analyze the ACS data and building forms around bus stops, we selected several key factors for visualization. \nIn terms of population density, Center City and the southern parts of the city have the highest density, while West Philadelphia, North Philadelphia, and the Frankford area also exhibit relatively high densities. Regarding ethnic diversity, Northeastern Philadelphia stands out as the most diverse. For poverty rates, North Philadelphia and the Upper West Philadelphia area have the highest levels of poverty.\n\n\n\nFig 3. Built Form Selected Variables\n\n\nBuilding density is relatively high in most of Center City and South Philadelphia, aligning closely with population density patterns. Center City also features the highest Floor Area Ratio (FAR). Additionally, areas with higher Green View Index (GVI) are typically concentrated near green spaces, particularly along Wissahickon Valley Park.\n3. Analyzing Heat Stress Around Bus Stops Using OLS\nUsing Ordinary Least Squares (OLS) to analyze the relationship between heat stress around bus stops and socioeconomic and built form factors.",
    "crumbs": [
      "Analysis",
      "Explore integration with Socio-Ecological & Built Form"
    ]
  },
  {
    "objectID": "analysis/index.html",
    "href": "analysis/index.html",
    "title": "Analysis",
    "section": "",
    "text": "Analysis\nThis section includes examples of technical analysis done using Jupyter notebooks. Each sub-section highlights different types of analyses and visualizations. In particular, it highlights that we can easily publish interactive visualizations produced with packages such as hvPlot, altair, or Folium, without losing any of the interactive features.\nOn this page, you might want to share more introductory or background information about the analyses to help guide the reader.",
    "crumbs": [
      "Analysis"
    ]
  },
  {
    "objectID": "Code/MidDay.html",
    "href": "Code/MidDay.html",
    "title": "MUSA 550 Final Project",
    "section": "",
    "text": "## 2 Step: Mid-Day Examination.\n\n%pip install geopandas\n\n# Import necessary library\nimport geopandas as gpd\n\n# Path to your GeoJSON file\nfile_path = \"C:/Users/25077/Final/data/2020_PA_stops_buffer3_UTCI.geojson\"\n\n# Read the GeoJSON file into a GeoDataFrame\ngdf = gpd.read_file(file_path)\n\nimport matplotlib.pyplot as plt\n\n# Convert MULTIPOLYGON geometries to their centroids\ngdf['geometry'] = gdf.geometry.centroid\n\n# Reproject to WGS 84 (EPSG:4326)\ngdf = gdf.to_crs(epsg=4326)\n\n# Load the city limits GeoJSON\ncity_limits_gdf = gpd.read_file(\"C:/Users/25077/Final/data/City_Limits.geojson\")\ncity_limits_gdf = city_limits_gdf.to_crs(epsg=4326)  # Reproject if needed\n\nRequirement already satisfied: geopandas in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (0.13.2)\nRequirement already satisfied: fiona&gt;=1.8.19 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from geopandas) (1.9.4)\nRequirement already satisfied: packaging in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from geopandas) (24.1)\nRequirement already satisfied: pandas&gt;=1.1.0 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from geopandas) (1.5.3)\nRequirement already satisfied: pyproj&gt;=3.0.1 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from geopandas) (3.6.1)\nRequirement already satisfied: shapely&gt;=1.7.1 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from geopandas) (2.0.1)\nRequirement already satisfied: attrs&gt;=19.2.0 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from fiona&gt;=1.8.19-&gt;geopandas) (24.2.0)\nRequirement already satisfied: certifi in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from fiona&gt;=1.8.19-&gt;geopandas) (2024.7.4)\nRequirement already satisfied: click~=8.0 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from fiona&gt;=1.8.19-&gt;geopandas) (8.1.7)\nRequirement already satisfied: click-plugins&gt;=1.0 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from fiona&gt;=1.8.19-&gt;geopandas) (1.1.1)\nRequirement already satisfied: cligj&gt;=0.5 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from fiona&gt;=1.8.19-&gt;geopandas) (0.7.2)\nRequirement already satisfied: six in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from fiona&gt;=1.8.19-&gt;geopandas) (1.16.0)\nRequirement already satisfied: python-dateutil&gt;=2.8.1 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from pandas&gt;=1.1.0-&gt;geopandas) (2.9.0)\nRequirement already satisfied: pytz&gt;=2020.1 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from pandas&gt;=1.1.0-&gt;geopandas) (2024.1)\nRequirement already satisfied: numpy&gt;=1.21.0 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from pandas&gt;=1.1.0-&gt;geopandas) (1.24.4)\nRequirement already satisfied: colorama in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from click~=8.0-&gt;fiona&gt;=1.8.19-&gt;geopandas) (0.4.6)\nNote: you may need to restart the kernel to use updated packages.\n\n\n\n# Import necessary libraries\nimport pandas as pd\n\n# Function to filter necessary columns\ndef filter_13_mean(data):\n   \n    # Select necessary columns\n    filtered_data = data[[\"stop_id\", \"stop_name\", \"13_mean\", \"geometry\"]]\n    return filtered_data\n\n# Applying the function to the existing gdf\nfiltered_gdf = filter_13_mean(gdf)\n\n# Display or save the filtered data\nprint(filtered_gdf)\n\n     stop_id                             stop_name    13_mean  \\\n0         69             Front St & Market St Loop  37.893180   \n1        359                    Market St & 6th St  37.907860   \n2        428                  2nd St Station - MFL  37.825040   \n3        638               5th St & Market St - FS  37.704560   \n4        735                    7th St & Market St  35.379926   \n...      ...                                   ...        ...   \n8121   32318            Hunting Park Av & Front St  37.861160   \n8122   32322            Hunting Park Av & Front St  38.254392   \n8123   32323          Hunting Park Av & Bristol St  37.981067   \n8124   32368  Hunting Park Av & Macalester St - FS  37.839459   \n8125   32369       Hunting Park Av & Macalester St  38.072696   \n\n                        geometry  \n0     POINT (-75.14232 39.94977)  \n1     POINT (-75.15024 39.95081)  \n2     POINT (-75.14376 39.94979)  \n3     POINT (-75.14876 39.95105)  \n4     POINT (-75.15195 39.95080)  \n...                          ...  \n8121  POINT (-75.12614 40.01380)  \n8122  POINT (-75.12583 40.01389)  \n8123  POINT (-75.12844 40.01423)  \n8124  POINT (-75.12283 40.01352)  \n8125  POINT (-75.12232 40.01330)  \n\n[8126 rows x 4 columns]\n\n\n\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\n\n# Load your city limits data\ncity_limits_gdf = gpd.read_file(\"C:/Users/25077/Final/data/City_Limits.geojson\")\n\n# Ensure both GeoDataFrames use the same CRS\ncity_limits_gdf = city_limits_gdf.to_crs(epsg=4326)\nfiltered_gdf = filtered_gdf.to_crs(epsg=4326)\n\n# Perform a spatial join to filter stops within the city limits\nstops_within_city = gpd.sjoin(filtered_gdf, city_limits_gdf, op=\"within\")\n\n# Plot the results\nfig, ax = plt.subplots(1, 1, figsize=(12, 8))\n\n# Plot city limits\ncity_limits_gdf.plot(ax=ax, color=\"lightgrey\", alpha=0.5, label=\"City Limits\")\n\n# Plot stops, color-coded by temperature (13_mean)\nstops_within_city.plot(\n    ax=ax,\n    column=\"13_mean\",\n    cmap=\"coolwarm\",\n    legend=True,\n    legend_kwds={\"label\": \"Temperature (13_mean)\"},\n    markersize=1,\n)\n\n# Add titles and labels\nplt.title(\"Bus Stops by Temperature in Mid-Day\", fontsize=16)\nplt.xlabel(\"Longitude\", fontsize=12)\nplt.ylabel(\"Latitude\", fontsize=12)\n\n# Display the plot\nplt.show()\n\nc:\\Users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages\\IPython\\core\\interactiveshell.py:3448: FutureWarning: The `op` parameter is deprecated and will be removed in a future release. Please use the `predicate` parameter instead.\n  if await self.run_code(code, result, async_=asy):\n\n\n\n\n\n\n\n\n\n\nfiltered_gdf.head()\n\n\n\n\n\n\n\n\nstop_id\nstop_name\n13_mean\ngeometry\n\n\n\n\n0\n69\nFront St & Market St Loop\n37.893180\nPOINT (-75.14232 39.94977)\n\n\n1\n359\nMarket St & 6th St\n37.907860\nPOINT (-75.15024 39.95081)\n\n\n2\n428\n2nd St Station - MFL\n37.825040\nPOINT (-75.14376 39.94979)\n\n\n3\n638\n5th St & Market St - FS\n37.704560\nPOINT (-75.14876 39.95105)\n\n\n4\n735\n7th St & Market St\n35.379926\nPOINT (-75.15195 39.95080)\n\n\n\n\n\n\n\n\nimport geopandas as gpd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import DBSCAN\n\n\n# Check for missing values and drop rows with NaN\nfiltered_gdf[\"x\"] = filtered_gdf.geometry.x\nfiltered_gdf[\"y\"] = filtered_gdf.geometry.y\nfiltered_gdf = filtered_gdf.dropna(subset=[\"x\", \"y\", \"13_mean\"])\n\n# Calculate the threshold for the hottest 10% stops\nthreshold = np.percentile(filtered_gdf[\"13_mean\"], 90)\n\n# Filter the hottest 10% stops\nhottest_stops = filtered_gdf[filtered_gdf[\"13_mean\"] &gt;= threshold]\n\n# Plot the hottest 10% stops\nfig, ax = plt.subplots(1, 1, figsize=(12, 8))\n\n# Plot city limits\ncity_limits_gdf.plot(ax=ax, color=\"lightgrey\", alpha=0.2, label=\"City Limits\")\n\n# Plot hottest stops\nhottest_stops.plot(\n    ax=ax,\n    column=\"13_mean\",\n    cmap=\"Reds\",\n    legend=True,\n    legend_kwds={\"label\": \"Temperature (13_mean)\"},\n    markersize=6,\n    alpha=1,\n)\n\n# Add titles and labels\nplt.title(\"Hottest 10% Transit Stops by Temperature\", fontsize=16)\nplt.xlabel(\"Longitude\", fontsize=12)\nplt.ylabel(\"Latitude\", fontsize=12)\nplt.legend()\nplt.show()\n\nC:\\Users\\25077\\AppData\\Local\\Temp\\ipykernel_18848\\4235607243.py:39: UserWarning: Legend does not support handles for PatchCollection instances.\nSee: https://matplotlib.org/stable/tutorials/intermediate/legend_guide.html#implementing-a-custom-legend-handler\n  plt.legend()\nNo artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n\n\n\n\n\n\n\n\n\n\n# Calculate the threshold for the coldest 10% stops\ncold_threshold = np.percentile(filtered_gdf[\"13_mean\"], 10)\n\n# Filter the coldest 10% stops\ncoldest_stops = filtered_gdf[filtered_gdf[\"13_mean\"] &lt;= cold_threshold]\n\n# Plot the coldest 10% stops\nfig, ax = plt.subplots(1, 1, figsize=(12, 8))\n\n# Plot city limits\ncity_limits_gdf.plot(ax=ax, color=\"lightgrey\", alpha=0.2, label=\"City Limits\")\n\n# Plot coldest stops\ncoldest_stops.plot(\n    ax=ax,\n    column=\"13_mean\",\n    cmap=\"Blues\",\n    legend=True,\n    legend_kwds={\"label\": \"Temperature (13_mean)\"},\n    markersize=6,\n    alpha=1,\n)\n\n# Add titles and labels\nplt.title(\"Coldest 10% Transit Stops by Temperature\", fontsize=16)\nplt.xlabel(\"Longitude\", fontsize=12)\nplt.ylabel(\"Latitude\", fontsize=12)\nplt.legend()\nplt.show()\n\nC:\\Users\\25077\\AppData\\Local\\Temp\\ipykernel_18848\\3189886705.py:28: UserWarning: Legend does not support handles for PatchCollection instances.\nSee: https://matplotlib.org/stable/tutorials/intermediate/legend_guide.html#implementing-a-custom-legend-handler\n  plt.legend()\nNo artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n\n\n\n\n\n\n\n\n\n\nfrom sklearn.cluster import DBSCAN\n\n# Extract coordinates for the hottest 10% stops\nhottest_coordinates = hottest_stops[[\"x\", \"y\"]].values\n\n# Perform DBSCAN clustering\ndbscan = DBSCAN(eps=0.005, min_samples=5, metric=\"euclidean\")\nhottest_stops[\"cluster\"] = dbscan.fit_predict(hottest_coordinates)\n\n# Check if clustering occurred\nclusters = hottest_stops[\"cluster\"].unique()\ncluster_counts = hottest_stops[\"cluster\"].value_counts()\n\nprint(\"Clusters found:\", clusters)\nprint(\"Cluster sizes:\\n\", cluster_counts)\n\n# Plot the clustering result\nfig, ax = plt.subplots(1, 1, figsize=(12, 8))\n\n# Plot city limits\ncity_limits_gdf.plot(ax=ax, color=\"lightgrey\", alpha=0.3, label=\"City Limits\")\n\n# Plot clustered points\nfor cluster_id in clusters:\n    cluster_data = hottest_stops[hottest_stops[\"cluster\"] == cluster_id]\n    if cluster_id == -1:  # Noise points\n        cluster_label = \"Noise\"\n        cluster_color = \"grey\"\n    else:\n        cluster_label = f\"Cluster {cluster_id}\"\n        cluster_color = None\n    cluster_data.plot(\n        ax=ax,\n        color=cluster_color,\n        markersize=6,\n        label=cluster_label,\n    )\n\n# Add titles and labels\nplt.title(\"Clustering of Hottest 10% Transit Stops\", fontsize=16)\nplt.xlabel(\"Longitude\", fontsize=12)\nplt.ylabel(\"Latitude\", fontsize=12)\nplt.legend()\nplt.show()\n\nc:\\Users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages\\geopandas\\geodataframe.py:1538: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  super().__setitem__(key, value)\n\n\nClusters found: [ 0 -1  2  1  4  3  5  6  7  8  9 10 12 11 13 14 15 16 17 18 19 20 21 22\n 23 44 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43]\nCluster sizes:\n -1     263\n 25     70\n 1      46\n 17     43\n 3      28\n 12     25\n 6      24\n 31     19\n 43     16\n 18     14\n 2      13\n 5      13\n 28     12\n 7      11\n 36     10\n 24     10\n 13     10\n 16     10\n 38      9\n 10      9\n 33      9\n 42      9\n 19      8\n 20      8\n 30      7\n 0       7\n 15      7\n 14      7\n 9       7\n 34      6\n 35      6\n 40      6\n 23      6\n 41      5\n 39      5\n 8       5\n 37      5\n 44      5\n 11      5\n 32      5\n 29      5\n 21      5\n 27      5\n 26      5\n 22      5\n 4       3\nName: cluster, dtype: int64\n\n\nC:\\Users\\25077\\AppData\\Local\\Temp\\ipykernel_18848\\965146887.py:43: UserWarning: Legend does not support handles for PatchCollection instances.\nSee: https://matplotlib.org/stable/tutorials/intermediate/legend_guide.html#implementing-a-custom-legend-handler\n  plt.legend()\n\n\n\n\n\n\n\n\n\n\nfrom sklearn.cluster import DBSCAN\n\n# Extract coordinates for the hottest 10% stops\ncoldest_coordinates = coldest_stops[[\"x\", \"y\"]].values\n\n# Perform DBSCAN clustering\ndbscan = DBSCAN(eps=0.005, min_samples=5, metric=\"euclidean\")\ncoldest_stops[\"cluster\"] = dbscan.fit_predict(coldest_coordinates)\n\n# Check if clustering occurred\nclusters = coldest_stops[\"cluster\"].unique()\ncluster_counts = coldest_stops[\"cluster\"].value_counts()\n\nprint(\"Clusters found:\", clusters)\nprint(\"Cluster sizes:\\n\", cluster_counts)\n\n# Plot the clustering result\nfig, ax = plt.subplots(1, 1, figsize=(12, 8))\n\n# Plot city limits\ncity_limits_gdf.plot(ax=ax, color=\"lightgrey\", alpha=0.3, label=\"City Limits\")\n\n# Plot clustered points\nfor cluster_id in clusters:\n    cluster_data = coldest_stops[coldest_stops[\"cluster\"] == cluster_id]\n    if cluster_id == -1:  # Noise points\n        cluster_label = \"Noise\"\n        cluster_color = \"grey\"\n    else:\n        cluster_label = f\"Cluster {cluster_id}\"\n        cluster_color = None\n    cluster_data.plot(\n        ax=ax,\n        color=cluster_color,\n        markersize=6,\n        label=cluster_label,\n    )\n\n# Add titles and labels\nplt.title(\"Clustering of Coldest 10% Transit Stops\", fontsize=16)\nplt.xlabel(\"Longitude\", fontsize=12)\nplt.ylabel(\"Latitude\", fontsize=12)\nplt.legend()\nplt.show()\n\nc:\\Users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages\\geopandas\\geodataframe.py:1538: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  super().__setitem__(key, value)\n\n\nClusters found: [ 0  1 -1  2  3  4  5  6  7  8  9 13 23 10 11 12 17 14 15 16 18 19 20 21\n 22 24 25 26 27]\nCluster sizes:\n -1     362\n 0     131\n 17     43\n 22     30\n 19     30\n 15     30\n 4      18\n 23     17\n 7      14\n 27     12\n 11     10\n 6      10\n 21     10\n 2       8\n 10      7\n 5       7\n 20      7\n 3       6\n 25      6\n 24      6\n 9       6\n 18      6\n 13      5\n 14      5\n 12      5\n 1       5\n 8       5\n 26      5\n 16      5\nName: cluster, dtype: int64\n\n\nC:\\Users\\25077\\AppData\\Local\\Temp\\ipykernel_18848\\277517457.py:43: UserWarning: Legend does not support handles for PatchCollection instances.\nSee: https://matplotlib.org/stable/tutorials/intermediate/legend_guide.html#implementing-a-custom-legend-handler\n  plt.legend()\n\n\n\n\n\n\n\n\n\n\n%pip install esda\n%pip install libpysal splot\n\n\nimport libpysal as ps\nfrom esda import Moran\nfrom splot.esda import moran_scatterplot\nimport matplotlib.pyplot as plt\n\n# Ensure CRS is consistent\nfiltered_gdf = filtered_gdf.to_crs(epsg=4326)\n\n# Create a spatial weights matrix based on distances between stops\ncoords = filtered_gdf.geometry.apply(lambda geom: (geom.x, geom.y)).tolist()\nw = ps.weights.DistanceBand.from_dataframe(filtered_gdf, threshold=0.01, silence_warnings=True)  # 0.01 is approx. 1km\n\n# Standardize the weights (row-normalization)\nw.transform = 'r'\n\n# Calculate Moran's I for bus stop temperatures\ny = filtered_gdf[\"13_mean\"].values  # Temperature column\nmoran = Moran(y, w)\n\n# Print Moran's I statistic and p-value\nprint(f\"Moran's I: {moran.I}\")\nprint(f\"P-value: {moran.p_sim}\")\n\n# Visualize the spatial distribution of temperatures\nfig, ax = plt.subplots(1, 1, figsize=(12, 8))\nfiltered_gdf.plot(column=\"13_mean\", cmap=\"coolwarm\", legend=True, ax=ax)\nplt.title(\"Spatial Distribution of Bus Stop Temperatures\", fontsize=16)\nplt.xlabel(\"Longitude\")\nplt.ylabel(\"Latitude\")\nplt.show()\n\n# Plot Moran's I scatterplot\nfig, ax = moran_scatterplot(moran)\nplt.title(\"Moran's I Scatterplot\", fontsize=16)\nplt.show()\n\nRequirement already satisfied: esda in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (2.6.0)\nRequirement already satisfied: geopandas&gt;=0.12 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from esda) (0.13.2)\nRequirement already satisfied: libpysal&gt;=4.12 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from esda) (4.12.0)\nRequirement already satisfied: numpy&gt;=1.24 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from esda) (1.24.4)\nRequirement already satisfied: pandas&gt;1.5 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from esda) (1.5.3)\nRequirement already satisfied: scikit-learn&gt;=1.2 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from esda) (1.3.0)\nRequirement already satisfied: scipy&gt;=1.9 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from esda) (1.14.1)\nRequirement already satisfied: shapely&gt;=2.0 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from esda) (2.0.1)\nRequirement already satisfied: fiona&gt;=1.8.19 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from geopandas&gt;=0.12-&gt;esda) (1.9.4)\nRequirement already satisfied: packaging in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from geopandas&gt;=0.12-&gt;esda) (24.1)\nRequirement already satisfied: pyproj&gt;=3.0.1 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from geopandas&gt;=0.12-&gt;esda) (3.6.1)\nRequirement already satisfied: beautifulsoup4&gt;=4.10 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from libpysal&gt;=4.12-&gt;esda) (4.12.2)\nRequirement already satisfied: platformdirs&gt;=2.0.2 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from libpysal&gt;=4.12-&gt;esda) (4.2.2)\nRequirement already satisfied: requests&gt;=2.27 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from libpysal&gt;=4.12-&gt;esda) (2.31.0)\nRequirement already satisfied: python-dateutil&gt;=2.8.1 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from pandas&gt;1.5-&gt;esda) (2.9.0)\nRequirement already satisfied: pytz&gt;=2020.1 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from pandas&gt;1.5-&gt;esda) (2024.1)\nRequirement already satisfied: joblib&gt;=1.1.1 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from scikit-learn&gt;=1.2-&gt;esda) (1.4.2)\nRequirement already satisfied: threadpoolctl&gt;=2.0.0 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from scikit-learn&gt;=1.2-&gt;esda) (3.5.0)\nRequirement already satisfied: soupsieve&gt;1.2 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from beautifulsoup4&gt;=4.10-&gt;libpysal&gt;=4.12-&gt;esda) (2.5)\nRequirement already satisfied: attrs&gt;=19.2.0 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from fiona&gt;=1.8.19-&gt;geopandas&gt;=0.12-&gt;esda) (24.2.0)\nRequirement already satisfied: certifi in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from fiona&gt;=1.8.19-&gt;geopandas&gt;=0.12-&gt;esda) (2024.7.4)\nRequirement already satisfied: click~=8.0 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from fiona&gt;=1.8.19-&gt;geopandas&gt;=0.12-&gt;esda) (8.1.7)\nRequirement already satisfied: click-plugins&gt;=1.0 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from fiona&gt;=1.8.19-&gt;geopandas&gt;=0.12-&gt;esda) (1.1.1)\nRequirement already satisfied: cligj&gt;=0.5 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from fiona&gt;=1.8.19-&gt;geopandas&gt;=0.12-&gt;esda) (0.7.2)\nRequirement already satisfied: six in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from fiona&gt;=1.8.19-&gt;geopandas&gt;=0.12-&gt;esda) (1.16.0)\nRequirement already satisfied: charset-normalizer&lt;4,&gt;=2 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from requests&gt;=2.27-&gt;libpysal&gt;=4.12-&gt;esda) (3.3.2)\nRequirement already satisfied: idna&lt;4,&gt;=2.5 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from requests&gt;=2.27-&gt;libpysal&gt;=4.12-&gt;esda) (3.8)\nRequirement already satisfied: urllib3&lt;3,&gt;=1.21.1 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from requests&gt;=2.27-&gt;libpysal&gt;=4.12-&gt;esda) (1.26.19)\nRequirement already satisfied: colorama in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from click~=8.0-&gt;fiona&gt;=1.8.19-&gt;geopandas&gt;=0.12-&gt;esda) (0.4.6)\nNote: you may need to restart the kernel to use updated packages.\nRequirement already satisfied: libpysal in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (4.12.0)\nRequirement already satisfied: splot in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (1.1.7)\nRequirement already satisfied: beautifulsoup4&gt;=4.10 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from libpysal) (4.12.2)\nRequirement already satisfied: geopandas&gt;=0.10.0 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from libpysal) (0.13.2)\nRequirement already satisfied: numpy&gt;=1.22 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from libpysal) (1.24.4)\nRequirement already satisfied: packaging&gt;=22 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from libpysal) (24.1)\nRequirement already satisfied: pandas&gt;=1.4 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from libpysal) (1.5.3)\nRequirement already satisfied: platformdirs&gt;=2.0.2 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from libpysal) (4.2.2)\nRequirement already satisfied: requests&gt;=2.27 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from libpysal) (2.31.0)\nRequirement already satisfied: scipy&gt;=1.8 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from libpysal) (1.14.1)\nRequirement already satisfied: shapely&gt;=2.0.1 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from libpysal) (2.0.1)\nRequirement already satisfied: scikit-learn&gt;=1.1 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from libpysal) (1.3.0)\nRequirement already satisfied: esda in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from splot) (2.6.0)\nRequirement already satisfied: giddy in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from splot) (2.3.6)\nRequirement already satisfied: mapclassify in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from splot) (2.5.0)\nRequirement already satisfied: matplotlib&gt;=3.3.3 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from splot) (3.7.2)\nRequirement already satisfied: seaborn&gt;=0.11.0 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from splot) (0.12.2)\nRequirement already satisfied: spreg in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from splot) (1.8.1)\nRequirement already satisfied: soupsieve&gt;1.2 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from beautifulsoup4&gt;=4.10-&gt;libpysal) (2.5)\nRequirement already satisfied: fiona&gt;=1.8.19 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from geopandas&gt;=0.10.0-&gt;libpysal) (1.9.4)\nRequirement already satisfied: pyproj&gt;=3.0.1 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from geopandas&gt;=0.10.0-&gt;libpysal) (3.6.1)\nRequirement already satisfied: contourpy&gt;=1.0.1 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from matplotlib&gt;=3.3.3-&gt;splot) (1.3.0)\nRequirement already satisfied: cycler&gt;=0.10 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from matplotlib&gt;=3.3.3-&gt;splot) (0.12.1)\nRequirement already satisfied: fonttools&gt;=4.22.0 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from matplotlib&gt;=3.3.3-&gt;splot) (4.53.1)\nRequirement already satisfied: kiwisolver&gt;=1.0.1 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from matplotlib&gt;=3.3.3-&gt;splot) (1.4.5)\nRequirement already satisfied: pillow&gt;=6.2.0 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from matplotlib&gt;=3.3.3-&gt;splot) (10.0.0)\nRequirement already satisfied: pyparsing&lt;3.1,&gt;=2.3.1 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from matplotlib&gt;=3.3.3-&gt;splot) (3.0.9)\nRequirement already satisfied: python-dateutil&gt;=2.7 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from matplotlib&gt;=3.3.3-&gt;splot) (2.9.0)\nRequirement already satisfied: pytz&gt;=2020.1 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from pandas&gt;=1.4-&gt;libpysal) (2024.1)\nRequirement already satisfied: charset-normalizer&lt;4,&gt;=2 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from requests&gt;=2.27-&gt;libpysal) (3.3.2)\nRequirement already satisfied: idna&lt;4,&gt;=2.5 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from requests&gt;=2.27-&gt;libpysal) (3.8)\nRequirement already satisfied: urllib3&lt;3,&gt;=1.21.1 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from requests&gt;=2.27-&gt;libpysal) (1.26.19)\nRequirement already satisfied: certifi&gt;=2017.4.17 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from requests&gt;=2.27-&gt;libpysal) (2024.7.4)\nRequirement already satisfied: joblib&gt;=1.1.1 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from scikit-learn&gt;=1.1-&gt;libpysal) (1.4.2)\nRequirement already satisfied: threadpoolctl&gt;=2.0.0 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from scikit-learn&gt;=1.1-&gt;libpysal) (3.5.0)\nRequirement already satisfied: quantecon&gt;=0.7 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from giddy-&gt;splot) (0.7.2)\nRequirement already satisfied: networkx in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from mapclassify-&gt;splot) (3.1)\nRequirement already satisfied: attrs&gt;=19.2.0 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from fiona&gt;=1.8.19-&gt;geopandas&gt;=0.10.0-&gt;libpysal) (24.2.0)\nRequirement already satisfied: click~=8.0 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from fiona&gt;=1.8.19-&gt;geopandas&gt;=0.10.0-&gt;libpysal) (8.1.7)\nRequirement already satisfied: click-plugins&gt;=1.0 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from fiona&gt;=1.8.19-&gt;geopandas&gt;=0.10.0-&gt;libpysal) (1.1.1)\nRequirement already satisfied: cligj&gt;=0.5 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from fiona&gt;=1.8.19-&gt;geopandas&gt;=0.10.0-&gt;libpysal) (0.7.2)\nRequirement already satisfied: six in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from fiona&gt;=1.8.19-&gt;geopandas&gt;=0.10.0-&gt;libpysal) (1.16.0)\nRequirement already satisfied: numba&gt;=0.49.0 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from quantecon&gt;=0.7-&gt;giddy-&gt;splot) (0.60.0)\nRequirement already satisfied: sympy in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from quantecon&gt;=0.7-&gt;giddy-&gt;splot) (1.13.2)\nRequirement already satisfied: colorama in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from click~=8.0-&gt;fiona&gt;=1.8.19-&gt;geopandas&gt;=0.10.0-&gt;libpysal) (0.4.6)\nRequirement already satisfied: llvmlite&lt;0.44,&gt;=0.43.0dev0 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from numba&gt;=0.49.0-&gt;quantecon&gt;=0.7-&gt;giddy-&gt;splot) (0.43.0)\nRequirement already satisfied: mpmath&lt;1.4,&gt;=1.1.0 in c:\\users\\25077\\miniforge3\\envs\\musa-550-fall-2023\\lib\\site-packages (from sympy-&gt;quantecon&gt;=0.7-&gt;giddy-&gt;splot) (1.3.0)\nNote: you may need to restart the kernel to use updated packages.\nMoran's I: 0.09913440203742446\nP-value: 0.001\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfrom esda.moran import Moran_Local\nfrom splot.esda import lisa_cluster\n\n# Ensure CRS is consistent\nfiltered_gdf = filtered_gdf.to_crs(epsg=4326)\n\n# Create a spatial weights matrix\nw = ps.weights.DistanceBand.from_dataframe(filtered_gdf, threshold=0.01, silence_warnings=True)  # ~1km\nw.transform = 'r'  # Row-standardize the weights\n\n# Extract the temperature column\ny = filtered_gdf[\"13_mean\"].values\n\n# Calculate Local Moran's I\nlocal_moran = Moran_Local(y, w)\n\n# Add LISA results to GeoDataFrame\nfiltered_gdf[\"Local Moran\"] = local_moran.Is\nfiltered_gdf[\"LISA Cluster\"] = local_moran.q  # Quadrant: 1=HH, 2=LH, 3=LL, 4=HL\n\n# Create a new column for human-readable cluster labels\nfiltered_gdf[\"Cluster Type\"] = filtered_gdf[\"LISA Cluster\"].map(\n    {1: \"High-High\", 2: \"Low-High\", 3: \"Low-Low\", 4: \"High-Low\"}\n)\n\n# Plot city limits and overlay bus stops\nfig, ax = plt.subplots(1, 1, figsize=(12, 8))\n\n# Plot city limits\ncity_limits_gdf.plot(ax=ax, color=\"lightgrey\", alpha=0.3, label=\"City Limits\")\n\n# Plot bus stops with LISA cluster types\nfiltered_gdf.plot(\n    column=\"Cluster Type\",\n    cmap=\"tab10\",\n    legend=True,\n    ax=ax,\n    markersize=3,  # Adjust dot size here\n    alpha=0.9,\n    label=\"Bus Stops\"\n)\n\n# Add title and labels\nplt.title(\"LISA Cluster Map of Bus Stop Temperatures\", fontsize=14)\nplt.xlabel(\"Longitude\", fontsize=12)\nplt.ylabel(\"Latitude\", fontsize=12)\n\n# Show the plot\nplt.show()\n\n\n\n\n\n\n\n\n\n\n## ACS:\n# Path to your GeoJSON file\nfile_path = \"../data/2020_PA_stops_UTCI_ACS_SVI_Building.geojson\" \n\n# Read the GeoJSON file\nACS_Stops = gpd.read_file(file_path)\n\nACS_Stops.head()\n\n\n\n\n\n\n\n\nstop_id\nstop_name\nroute_ids\nUTCI_morning\nUTCI_evening\nUTCI_midday\nWFH\nMHI\nGI\nMR\n...\nUTM_X\nUTM_Y\nGVI\nsky_mean\nEnclosure\nBD\nBH\nFAR\nBN\ngeometry\n\n\n\n\n0\n69\nFront St & Market St Loop\n[17, 33, 48, 5]\n34.948630\n33.448350\n37.581686\n0.139661\n115521.638538\n0.398989\n1764.916597\n...\n2.699503e+06\n235350.66167\n0.058356\n0.310574\n0.23491\n0.196293\n1430.473848\n5.310069\n63\nPOINT (2699502.892 235350.662)\n\n\n1\n359\nMarket St & 6th St\n[17, 33]\n34.949771\n32.980376\n37.577274\n0.131727\n96124.564583\n0.435392\n1683.756114\n...\n2.697272e+06\n235665.34239\n0.081433\n0.252196\n0.27737\n0.234227\n1468.262696\n12.516998\n36\nPOINT (2697272.146 235665.342)\n\n\n2\n428\n2nd St Station - MFL\n[MFL]\n34.905987\n31.097113\n37.514491\n0.137856\n112177.011471\n0.408251\n1716.078724\n...\n2.699099e+06\n235349.65942\n0.072020\n0.299649\n0.24390\n0.244679\n1592.339376\n6.664597\n70\nPOINT (2699098.735 235349.659)\n\n\n3\n638\n5th St & Market St - FS\n[38, 44]\n34.115052\n30.884770\n36.707610\n0.139792\n101569.077090\n0.416658\n1701.532301\n...\n2.697684e+06\n235764.19761\n0.099296\n0.258906\n0.27435\n0.264319\n1435.131718\n9.756211\n50\nPOINT (2697683.510 235764.198)\n\n\n4\n735\n7th St & Market St\n[47]\n33.439477\n30.658051\n35.593438\n0.127642\n87832.216610\n0.451920\n1651.475390\n...\n2.696793e+06\n235646.11977\n0.062803\n0.242758\n0.28786\n0.296215\n1855.769137\n17.565049\n38\nPOINT (2696792.521 235646.120)\n\n\n\n\n5 rows × 40 columns\n\n\n\n\n# Display all column names\nprint(ACS_Stops.columns)\n\nIndex(['stop_id', 'stop_name', 'route_ids', 'UTCI_morning', 'UTCI_evening',\n       'UTCI_midday', 'WFH', 'MHI', 'GI', 'MR', 'MHV', 'Uninsured_19',\n       'Uninsured_19_34', 'Uninsured_35_64', 'Uninsured_65', 'Area_km2', 'UR',\n       'PR', 'BR', 'PD', 'CHR', 'White_prop', 'Black_prop',\n       'Native_American_prop', 'Asian_prop', 'OtherRaces_prop', 'ED',\n       'UTCI_400_sum', 'UTCI_avg', 'MEAN', 'UTM_X', 'UTM_Y', 'GVI', 'sky_mean',\n       'Enclosure', 'BD', 'BH', 'FAR', 'BN', 'geometry'],\n      dtype='object')\n\n\n\nimport geopandas as gpd\nimport matplotlib.pyplot as plt\n\n# Convert MULTIPOLYGON geometries to their centroids\nACS_Stops['geometry'] = ACS_Stops.geometry.centroid\n\n# Reproject to WGS 84 (EPSG:4326)\nACS_Stops = ACS_Stops.to_crs(epsg=4326)\n\n# Assuming `ACS_Stops` contains the bus stops and `city_limits_gdf` contains the city limits\n\nimport matplotlib.pyplot as plt\n\n# Create a figure with 1 row and 3 columns of subplots\nfig, axes = plt.subplots(1, 3, figsize=(18, 6))\n\n# Plot City Limits for reference\ncity_limits_gdf.plot(ax=axes[0], color=\"lightgrey\", alpha=0.3, label=\"City Limits\")\ncity_limits_gdf.plot(ax=axes[1], color=\"lightgrey\", alpha=0.3, label=\"City Limits\")\ncity_limits_gdf.plot(ax=axes[2], color=\"lightgrey\", alpha=0.3, label=\"City Limits\")\n\n# Plot Population Density\nACS_Stops.plot(\n    column=\"PD\",\n    cmap=\"magma\",\n    legend=True,\n    ax=axes[0],\n    markersize=1,\n    alpha=0.7,\n    label=\"Population Density\"\n)\naxes[0].set_title(\"Population Density of Bus Stops\")\naxes[0].set_xlabel(\"Longitude\")\naxes[0].set_ylabel(\"Latitude\")\n\n# Plot Ethnic Diversity\nACS_Stops.plot(\n    column=\"ED\",\n    cmap=\"RdPu\",\n    legend=True,\n    ax=axes[1],\n    markersize=1,\n    alpha=0.7,\n    label=\"Ethnic Diversity\"\n)\naxes[1].set_title(\"Ethnic Diversity of Bus Stops\")\naxes[1].set_xlabel(\"Longitude\")\naxes[1].set_ylabel(\"Latitude\")\n\n# Plot Poverty Rate\nACS_Stops.plot(\n    column=\"PR\",\n    cmap=\"Reds\",\n    legend=True,\n    ax=axes[2],\n    markersize=1,\n    alpha=0.7,\n    label=\"Poverty Rate\"\n)\naxes[2].set_title(\"Poverty Rate of Bus Stops\")\naxes[2].set_xlabel(\"Longitude\")\naxes[2].set_ylabel(\"Latitude\")\n\n# Adjust layout to avoid overlap\nplt.tight_layout()\n\n# Display the plots\nplt.show()\n\n\nC:\\Users\\25077\\AppData\\Local\\Temp\\ipykernel_18848\\2852317162.py:5: UserWarning: Geometry is in a geographic CRS. Results from 'centroid' are likely incorrect. Use 'GeoSeries.to_crs()' to re-project geometries to a projected CRS before this operation.\n\n  ACS_Stops['geometry'] = ACS_Stops.geometry.centroid\n\n\n\n\n\n\n\n\n\n\n# Create a figure with 1 row and 3 columns of subplots\nfig, axes = plt.subplots(1, 3, figsize=(18, 6))\n\n# Plot City Limits for reference\ncity_limits_gdf.plot(ax=axes[0], color=\"lightgrey\", alpha=0.3, label=\"City Limits\")\ncity_limits_gdf.plot(ax=axes[1], color=\"lightgrey\", alpha=0.3, label=\"City Limits\")\ncity_limits_gdf.plot(ax=axes[2], color=\"lightgrey\", alpha=0.3, label=\"City Limits\")\n\n# Plot Building Density\nACS_Stops.plot(\n    column=\"BD\",\n    cmap=\"Greys\",\n    legend=True,\n    ax=axes[0],\n    markersize=0.5,\n    alpha=0.7,\n    label=\"Building Density\"\n)\naxes[0].set_title(\"Building Density of Bus Stops\")\naxes[0].set_xlabel(\"Longitude\")\naxes[0].set_ylabel(\"Latitude\")\n\n# Plot Floor Area Ratio\nACS_Stops.plot(\n    column=\"FAR\",\n    cmap=\"viridis\",\n    legend=True,\n    ax=axes[1],\n    markersize=0.5,\n    alpha=0.7,\n    label=\"Floor Area Ratio\"\n)\naxes[1].set_title(\"Floor Area Ratio of Bus Stops\")\naxes[1].set_xlabel(\"Longitude\")\naxes[1].set_ylabel(\"Latitude\")\n\n# Plot Green View Index\nACS_Stops.plot(\n    column=\"GVI\",\n    cmap=\"cividis\",\n    legend=True,\n    ax=axes[2],\n    markersize=0.5,\n    alpha=0.7,\n    label=\"Green View Index\"\n)\naxes[2].set_title(\"Green View Index of Bus Stops\")\naxes[2].set_xlabel(\"Longitude\")\naxes[2].set_ylabel(\"Latitude\")\n\n# Adjust layout to avoid overlap\nplt.tight_layout()\n\n# Display the plots\nplt.show()\n\n\n\n\n\n\n\n\n\nimport statsmodels.api as sm\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\n\nfields = ['White_prop','Native_American_prop','Asian_prop',\n          'OtherRaces_prop','GI','MR','MHV','PD','PR','CHR',\n          'ED','MEAN','GVI','BH','FAR','Enclosure']\ndata = ACS_Stops[fields].dropna() \n\n\nY = data['MEAN']  \nX = data.drop(columns=['MEAN'])  \nX = sm.add_constant(X)  \n\n\nmodel = sm.OLS(Y, X).fit()\n\n\nprint(model.summary())\n\nvif_data = pd.DataFrame()\nvif_data['Variable'] = X.columns\nvif_data['VIF'] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\n\nprint(\"\\nVIF Results:\")\nprint(vif_data)\n\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:                   MEAN   R-squared:                       0.715\nModel:                            OLS   Adj. R-squared:                  0.714\nMethod:                 Least Squares   F-statistic:                     1355.\nDate:                Mon, 23 Dec 2024   Prob (F-statistic):               0.00\nTime:                        22:42:39   Log-Likelihood:                -1190.0\nNo. Observations:                8126   AIC:                             2412.\nDf Residuals:                    8110   BIC:                             2524.\nDf Model:                          15                                         \nCovariance Type:            nonrobust                                         \n========================================================================================\n                           coef    std err          t      P&gt;|t|      [0.025      0.975]\n----------------------------------------------------------------------------------------\nconst                   37.6897      0.017   2210.031      0.000      37.656      37.723\nWhite_prop               0.2593      0.020     12.789      0.000       0.220       0.299\nNative_American_prop     3.4687      0.640      5.421      0.000       2.214       4.723\nAsian_prop              -0.4149      0.066     -6.302      0.000      -0.544      -0.286\nOtherRaces_prop         -0.5702      0.053    -10.663      0.000      -0.675      -0.465\nGI                      -0.1260      0.058     -2.155      0.031      -0.241      -0.011\nMR                   -7.342e-05   1.92e-05     -3.831      0.000      -0.000   -3.59e-05\nMHV                   -5.36e-07    4.9e-08    -10.931      0.000   -6.32e-07    -4.4e-07\nPD                    1.207e-05   1.54e-06      7.817      0.000    9.04e-06    1.51e-05\nPR                       0.5171      0.056      9.251      0.000       0.408       0.627\nCHR                     -0.1377      0.027     -5.039      0.000      -0.191      -0.084\nED                       0.0732      0.027      2.670      0.008       0.019       0.127\nGVI                     -6.8951      0.114    -60.568      0.000      -7.118      -6.672\nBH                   -3.054e-05    3.3e-06     -9.256      0.000    -3.7e-05   -2.41e-05\nFAR                     -0.0379      0.001    -38.590      0.000      -0.040      -0.036\nEnclosure               -1.3142      0.118    -11.103      0.000      -1.546      -1.082\n==============================================================================\nOmnibus:                     5227.355   Durbin-Watson:                   0.972\nProb(Omnibus):                  0.000   Jarque-Bera (JB):           177151.677\nSkew:                          -2.572   Prob(JB):                         0.00\nKurtosis:                      25.288   Cond. No.                     4.84e+07\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n[2] The condition number is large, 4.84e+07. This might indicate that there are\nstrong multicollinearity or other numerical problems.\n\nVIF Results:\n                Variable        VIF\n0                  const  30.056540\n1             White_prop   3.476555\n2   Native_American_prop   1.098635\n3             Asian_prop   2.032977\n4        OtherRaces_prop   2.619529\n5                     GI   4.149072\n6                     MR   4.450124\n7                    MHV   4.645628\n8                     PD   3.159379\n9                     PR   4.989106\n10                   CHR   3.027447\n11                    ED   2.829961\n12                   GVI   2.994010\n13                    BH   2.430701\n14                   FAR   2.173048\n15             Enclosure   5.384361\n\n\n\nimport pickle\n\n# Save the model\nwith open(\"ols_model.pkl\", \"wb\") as file:\n    pickle.dump(model, file)\n\n# Save the VIF data\nvif_data.to_csv(\"vif_results.csv\", index=False)\n\n\nimport pickle\nimport pandas as pd\n\n# Load the model\nwith open(\"ols_model.pkl\", \"rb\") as file:\n    loaded_model = pickle.load(file)\n\n# Load the VIF data\nloaded_vif_data = pd.read_csv(\"vif_results.csv\")\n\n# Print the loaded results\nprint(loaded_model.summary())\nprint(\"\\nLoaded VIF Results:\")\nprint(loaded_vif_data)\n\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:                   MEAN   R-squared:                       0.715\nModel:                            OLS   Adj. R-squared:                  0.714\nMethod:                 Least Squares   F-statistic:                     1355.\nDate:                Mon, 23 Dec 2024   Prob (F-statistic):               0.00\nTime:                        22:47:14   Log-Likelihood:                -1190.0\nNo. Observations:                8126   AIC:                             2412.\nDf Residuals:                    8110   BIC:                             2524.\nDf Model:                          15                                         \nCovariance Type:            nonrobust                                         \n========================================================================================\n                           coef    std err          t      P&gt;|t|      [0.025      0.975]\n----------------------------------------------------------------------------------------\nconst                   37.6897      0.017   2210.031      0.000      37.656      37.723\nWhite_prop               0.2593      0.020     12.789      0.000       0.220       0.299\nNative_American_prop     3.4687      0.640      5.421      0.000       2.214       4.723\nAsian_prop              -0.4149      0.066     -6.302      0.000      -0.544      -0.286\nOtherRaces_prop         -0.5702      0.053    -10.663      0.000      -0.675      -0.465\nGI                      -0.1260      0.058     -2.155      0.031      -0.241      -0.011\nMR                   -7.342e-05   1.92e-05     -3.831      0.000      -0.000   -3.59e-05\nMHV                   -5.36e-07    4.9e-08    -10.931      0.000   -6.32e-07    -4.4e-07\nPD                    1.207e-05   1.54e-06      7.817      0.000    9.04e-06    1.51e-05\nPR                       0.5171      0.056      9.251      0.000       0.408       0.627\nCHR                     -0.1377      0.027     -5.039      0.000      -0.191      -0.084\nED                       0.0732      0.027      2.670      0.008       0.019       0.127\nGVI                     -6.8951      0.114    -60.568      0.000      -7.118      -6.672\nBH                   -3.054e-05    3.3e-06     -9.256      0.000    -3.7e-05   -2.41e-05\nFAR                     -0.0379      0.001    -38.590      0.000      -0.040      -0.036\nEnclosure               -1.3142      0.118    -11.103      0.000      -1.546      -1.082\n==============================================================================\nOmnibus:                     5227.355   Durbin-Watson:                   0.972\nProb(Omnibus):                  0.000   Jarque-Bera (JB):           177151.677\nSkew:                          -2.572   Prob(JB):                         0.00\nKurtosis:                      25.288   Cond. No.                     4.84e+07\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n[2] The condition number is large, 4.84e+07. This might indicate that there are\nstrong multicollinearity or other numerical problems.\n\nLoaded VIF Results:\n                Variable        VIF\n0                  const  30.056540\n1             White_prop   3.476555\n2   Native_American_prop   1.098635\n3             Asian_prop   2.032977\n4        OtherRaces_prop   2.619529\n5                     GI   4.149072\n6                     MR   4.450124\n7                    MHV   4.645628\n8                     PD   3.159379\n9                     PR   4.989106\n10                   CHR   3.027447\n11                    ED   2.829961\n12                   GVI   2.994010\n13                    BH   2.430701\n14                   FAR   2.173048\n15             Enclosure   5.384361"
  }
]